// <auto-generated> This file has been auto generated. </auto-generated>

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;
#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
using Newtonsoft.Json;
#endif

namespace FS.SDK.GraphQL.Model
{
    public partial class StudentVedLarestedQueryBuilder : GraphQlQueryBuilder<StudentVedLarestedQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
        {
            new() { Name = "id" },
            new() { Name = "studentnummer" },
            new() { Name = "personProfil", IsComplex = true, QueryBuilderType = typeof(PersonProfilQueryBuilder) },
            new() { Name = "larested", IsComplex = true, QueryBuilderType = typeof(OrganisasjonQueryBuilder) },
            new() { Name = "programStudieretter", IsComplex = true, QueryBuilderType = typeof(StudentVedLarestedProgramStudieretterConnectionQueryBuilder) },
            new() { Name = "emneStudieretter", IsComplex = true, QueryBuilderType = typeof(StudentVedLarestedEmneStudieretterConnectionQueryBuilder) },
            new() { Name = "semesterregistreringIInnevarendeSemester", IsComplex = true, QueryBuilderType = typeof(SemesterregistreringQueryBuilder) },
            new() { Name = "semesterregistreringer", IsComplex = true, QueryBuilderType = typeof(StudentVedLarestedSemesterregistreringerConnectionQueryBuilder) },
            new() { Name = "bibliotek", IsComplex = true, QueryBuilderType = typeof(BibliotekQueryBuilder) },
            new() { Name = "studieprogramISemester", IsComplex = true, QueryBuilderType = typeof(BeregnetStudieprogramForStudentISemesterQueryBuilder) },
            new() { Name = "innreisendeUtveksling", IsComplex = true, QueryBuilderType = typeof(InnreisendeUtvekslingQueryBuilder) },
            new() { Name = "hoyesteStudieniva", IsComplex = true, QueryBuilderType = typeof(StudienivaQueryBuilder) },
            new() { Name = "lanetakerId" },
            new() { Name = "europeanStudentId", IsComplex = true, QueryBuilderType = typeof(EsiQueryBuilder) },
            new() { Name = "utdanningsplaner", IsComplex = true, QueryBuilderType = typeof(StudentVedLarestedUtdanningsplanerConnectionQueryBuilder) },
            new() { Name = "studentkort", IsComplex = true, QueryBuilderType = typeof(StudentkortQueryBuilder) },
            new() { Name = "navn", IsComplex = true, QueryBuilderType = typeof(PersonnavnQueryBuilder) },
            new() { Name = "permisjoner", IsComplex = true, QueryBuilderType = typeof(StudentVedLarestedPermisjonerConnectionQueryBuilder) },
            new() { Name = "instrumenter", IsComplex = true, QueryBuilderType = typeof(InstrumentForStudentQueryBuilder) },
            new() { Name = "studietilpasninger", IsComplex = true, QueryBuilderType = typeof(StudietilpasningQueryBuilder) },
            new() { Name = "samtykker", IsComplex = true, QueryBuilderType = typeof(SamtykkeQueryBuilder) },
            new() { Name = "fakturaer", IsComplex = true, QueryBuilderType = typeof(StudentVedLarestedFakturaerConnectionQueryBuilder) },
            new() { Name = "fakturaerForInnevarendeTermin", IsComplex = true, QueryBuilderType = typeof(FakturaQueryBuilder) },
            new() { Name = "vurderingsmeldinger", IsComplex = true, QueryBuilderType = typeof(VurderingsmeldingQueryBuilder) },
            new() { Name = "eksamenstilpasningssoknader", IsComplex = true, QueryBuilderType = typeof(EksamenstilpasningssoknadQueryBuilder) },
            new() { Name = "soknaderOmEkstraVurderingsforsok", IsComplex = true, QueryBuilderType = typeof(SoknadOmEkstraVurderingsforsokQueryBuilder) },
            new() { Name = "undervisningstilpasninger", IsComplex = true, QueryBuilderType = typeof(UndervisningstilpasningQueryBuilder) },
            new() { Name = "bilde", IsComplex = true, QueryBuilderType = typeof(PersonbildeQueryBuilder) },
            new() { Name = "utreisendeUtveksling", IsComplex = true, QueryBuilderType = typeof(UtreisendeUtvekslingQueryBuilder) },
            new() { Name = "resultaterV2", IsComplex = true, QueryBuilderType = typeof(StudentVedLarestedResultaterV2ConnectionQueryBuilder) },
            new() { Name = "vurderingsforsokForEmner", IsComplex = true, QueryBuilderType = typeof(VurderingsforsokForEmneQueryBuilder) },
            new() { Name = "godkjentePolitiattester", IsComplex = true, QueryBuilderType = typeof(GodkjentPolitiattestQueryBuilder) },
            new() { Name = "politiattestKrav", IsComplex = true, QueryBuilderType = typeof(PolitiattestkravStudentQueryBuilder) },
            new() { Name = "arbeidsadresse", IsComplex = true, QueryBuilderType = typeof(ArbeidsadresseForStudentQueryBuilder) },
            new() { Name = "kanOverforesTilLms" },
            new() { Name = "enkeltemner", IsComplex = true, QueryBuilderType = typeof(StudentVedLarestedEnkeltemnerConnectionQueryBuilder) },
            new() { Name = "kriseKontaktperson", IsComplex = true, QueryBuilderType = typeof(KriseKontaktpersonQueryBuilder) },
            new() { Name = "emneSoknader", IsComplex = true, QueryBuilderType = typeof(StudentVedLarestedEmneSoknaderConnectionQueryBuilder) },
            new() { Name = "emnerIUtdanningsplaner", IsComplex = true, QueryBuilderType = typeof(StudentVedLarestedEmnerIUtdanningsplanerConnectionQueryBuilder) },
            new() { Name = "oppnaddKvalifikasjon", IsComplex = true, QueryBuilderType = typeof(OppnaddKvalifikasjonQueryBuilder) },
            new() { Name = "undervisningsaktivitetsonsker", IsComplex = true, QueryBuilderType = typeof(StudentVedLarestedUndervisningsaktivitetsonskerConnectionQueryBuilder) }
        };

        protected override string TypeName => "StudentVedLarested";

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields => AllFieldMetadata;

        public StudentVedLarestedQueryBuilder WithId(string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithScalarField("id", alias, [include, skip]);

        public StudentVedLarestedQueryBuilder ExceptId() => ExceptField("id");

        public StudentVedLarestedQueryBuilder WithStudentnummer(string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithScalarField("studentnummer", alias, [include, skip]);

        public StudentVedLarestedQueryBuilder ExceptStudentnummer() => ExceptField("studentnummer");

        public StudentVedLarestedQueryBuilder WithPersonProfil(PersonProfilQueryBuilder personProfilQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithObjectField("personProfil", alias, personProfilQueryBuilder, [include, skip]);

        public StudentVedLarestedQueryBuilder ExceptPersonProfil() => ExceptField("personProfil");

        public StudentVedLarestedQueryBuilder WithLarested(OrganisasjonQueryBuilder organisasjonQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithObjectField("larested", alias, organisasjonQueryBuilder, [include, skip]);

        public StudentVedLarestedQueryBuilder ExceptLarested() => ExceptField("larested");

        public StudentVedLarestedQueryBuilder WithProgramStudieretter(StudentVedLarestedProgramStudieretterConnectionQueryBuilder studentVedLarestedProgramStudieretterConnectionQueryBuilder, QueryBuilderParameter<StudentProgramStudierettFilterInput> filter = null, QueryBuilderParameter<StudentVedLarestedProgramStudieretterOrderBy> orderBy = null, QueryBuilderParameter<int?> first = null, QueryBuilderParameter<string> after = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (filter != null)
                args.Add(new() { ArgumentName = "filter", ArgumentValue = filter} );

            if (orderBy != null)
                args.Add(new() { ArgumentName = "orderBy", ArgumentValue = orderBy} );

            if (first != null)
                args.Add(new() { ArgumentName = "first", ArgumentValue = first} );

            if (after != null)
                args.Add(new() { ArgumentName = "after", ArgumentValue = after} );

            return WithObjectField("programStudieretter", alias, studentVedLarestedProgramStudieretterConnectionQueryBuilder, [include, skip], args);
        }

        public StudentVedLarestedQueryBuilder ExceptProgramStudieretter() => ExceptField("programStudieretter");

        public StudentVedLarestedQueryBuilder WithEmneStudieretter(StudentVedLarestedEmneStudieretterConnectionQueryBuilder studentVedLarestedEmneStudieretterConnectionQueryBuilder, QueryBuilderParameter<StudentVedLarestedEmneStudieretterFilterInput> filter = null, QueryBuilderParameter<int?> first = null, QueryBuilderParameter<string> after = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (filter != null)
                args.Add(new() { ArgumentName = "filter", ArgumentValue = filter} );

            if (first != null)
                args.Add(new() { ArgumentName = "first", ArgumentValue = first} );

            if (after != null)
                args.Add(new() { ArgumentName = "after", ArgumentValue = after} );

            return WithObjectField("emneStudieretter", alias, studentVedLarestedEmneStudieretterConnectionQueryBuilder, [include, skip], args);
        }

        public StudentVedLarestedQueryBuilder ExceptEmneStudieretter() => ExceptField("emneStudieretter");

        public StudentVedLarestedQueryBuilder WithSemesterregistreringIInnevarendeSemester(SemesterregistreringQueryBuilder semesterregistreringQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithObjectField("semesterregistreringIInnevarendeSemester", alias, semesterregistreringQueryBuilder, [include, skip]);

        public StudentVedLarestedQueryBuilder ExceptSemesterregistreringIInnevarendeSemester() => ExceptField("semesterregistreringIInnevarendeSemester");

        public StudentVedLarestedQueryBuilder WithSemesterregistreringer(StudentVedLarestedSemesterregistreringerConnectionQueryBuilder studentVedLarestedSemesterregistreringerConnectionQueryBuilder, QueryBuilderParameter<StudentSemesterregistreringerFilterInput> filter = null, QueryBuilderParameter<int?> first = null, QueryBuilderParameter<string> after = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (filter != null)
                args.Add(new() { ArgumentName = "filter", ArgumentValue = filter} );

            if (first != null)
                args.Add(new() { ArgumentName = "first", ArgumentValue = first} );

            if (after != null)
                args.Add(new() { ArgumentName = "after", ArgumentValue = after} );

            return WithObjectField("semesterregistreringer", alias, studentVedLarestedSemesterregistreringerConnectionQueryBuilder, [include, skip], args);
        }

        public StudentVedLarestedQueryBuilder ExceptSemesterregistreringer() => ExceptField("semesterregistreringer");

        public StudentVedLarestedQueryBuilder WithBibliotek(BibliotekQueryBuilder bibliotekQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithObjectField("bibliotek", alias, bibliotekQueryBuilder, [include, skip]);

        public StudentVedLarestedQueryBuilder ExceptBibliotek() => ExceptField("bibliotek");

        public StudentVedLarestedQueryBuilder WithStudieprogramISemester(BeregnetStudieprogramForStudentISemesterQueryBuilder beregnetStudieprogramForStudentISemesterQueryBuilder, QueryBuilderParameter<StudentStudieprogramISemesterFilterInput> filter = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (filter != null)
                args.Add(new() { ArgumentName = "filter", ArgumentValue = filter} );

            return WithObjectField("studieprogramISemester", alias, beregnetStudieprogramForStudentISemesterQueryBuilder, [include, skip], args);
        }

        public StudentVedLarestedQueryBuilder ExceptStudieprogramISemester() => ExceptField("studieprogramISemester");

        public StudentVedLarestedQueryBuilder WithInnreisendeUtveksling(InnreisendeUtvekslingQueryBuilder innreisendeUtvekslingQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithObjectField("innreisendeUtveksling", alias, innreisendeUtvekslingQueryBuilder, [include, skip]);

        public StudentVedLarestedQueryBuilder ExceptInnreisendeUtveksling() => ExceptField("innreisendeUtveksling");

        public StudentVedLarestedQueryBuilder WithHoyesteStudieniva(StudienivaQueryBuilder studienivaQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithObjectField("hoyesteStudieniva", alias, studienivaQueryBuilder, [include, skip]);

        public StudentVedLarestedQueryBuilder ExceptHoyesteStudieniva() => ExceptField("hoyesteStudieniva");

        public StudentVedLarestedQueryBuilder WithLanetakerId(string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithScalarField("lanetakerId", alias, [include, skip]);

        public StudentVedLarestedQueryBuilder ExceptLanetakerId() => ExceptField("lanetakerId");

        public StudentVedLarestedQueryBuilder WithEuropeanStudentId(EsiQueryBuilder esiQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithObjectField("europeanStudentId", alias, esiQueryBuilder, [include, skip]);

        public StudentVedLarestedQueryBuilder ExceptEuropeanStudentId() => ExceptField("europeanStudentId");

        public StudentVedLarestedQueryBuilder WithUtdanningsplaner(StudentVedLarestedUtdanningsplanerConnectionQueryBuilder studentVedLarestedUtdanningsplanerConnectionQueryBuilder, QueryBuilderParameter<StudentVedLarestedUtdanningsplanerFilterInput> filter = null, QueryBuilderParameter<int?> first = null, QueryBuilderParameter<string> after = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (filter != null)
                args.Add(new() { ArgumentName = "filter", ArgumentValue = filter} );

            if (first != null)
                args.Add(new() { ArgumentName = "first", ArgumentValue = first} );

            if (after != null)
                args.Add(new() { ArgumentName = "after", ArgumentValue = after} );

            return WithObjectField("utdanningsplaner", alias, studentVedLarestedUtdanningsplanerConnectionQueryBuilder, [include, skip], args);
        }

        public StudentVedLarestedQueryBuilder ExceptUtdanningsplaner() => ExceptField("utdanningsplaner");

        public StudentVedLarestedQueryBuilder WithStudentkort(StudentkortQueryBuilder studentkortQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithObjectField("studentkort", alias, studentkortQueryBuilder, [include, skip]);

        public StudentVedLarestedQueryBuilder ExceptStudentkort() => ExceptField("studentkort");

        public StudentVedLarestedQueryBuilder WithNavn(PersonnavnQueryBuilder personnavnQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithObjectField("navn", alias, personnavnQueryBuilder, [include, skip]);

        public StudentVedLarestedQueryBuilder ExceptNavn() => ExceptField("navn");

        public StudentVedLarestedQueryBuilder WithPermisjoner(StudentVedLarestedPermisjonerConnectionQueryBuilder studentVedLarestedPermisjonerConnectionQueryBuilder, QueryBuilderParameter<StudentVedLarestedPermisjonerFilterInput> filter = null, QueryBuilderParameter<int?> first = null, QueryBuilderParameter<string> after = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (filter != null)
                args.Add(new() { ArgumentName = "filter", ArgumentValue = filter} );

            if (first != null)
                args.Add(new() { ArgumentName = "first", ArgumentValue = first} );

            if (after != null)
                args.Add(new() { ArgumentName = "after", ArgumentValue = after} );

            return WithObjectField("permisjoner", alias, studentVedLarestedPermisjonerConnectionQueryBuilder, [include, skip], args);
        }

        public StudentVedLarestedQueryBuilder ExceptPermisjoner() => ExceptField("permisjoner");

        public StudentVedLarestedQueryBuilder WithInstrumenter(InstrumentForStudentQueryBuilder instrumentForStudentQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithObjectField("instrumenter", alias, instrumentForStudentQueryBuilder, [include, skip]);

        public StudentVedLarestedQueryBuilder ExceptInstrumenter() => ExceptField("instrumenter");

        public StudentVedLarestedQueryBuilder WithStudietilpasninger(StudietilpasningQueryBuilder studietilpasningQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithObjectField("studietilpasninger", alias, studietilpasningQueryBuilder, [include, skip]);

        public StudentVedLarestedQueryBuilder ExceptStudietilpasninger() => ExceptField("studietilpasninger");

        public StudentVedLarestedQueryBuilder WithSamtykker(SamtykkeQueryBuilder samtykkeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithObjectField("samtykker", alias, samtykkeQueryBuilder, [include, skip]);

        public StudentVedLarestedQueryBuilder ExceptSamtykker() => ExceptField("samtykker");

        public StudentVedLarestedQueryBuilder WithFakturaer(StudentVedLarestedFakturaerConnectionQueryBuilder studentVedLarestedFakturaerConnectionQueryBuilder, QueryBuilderParameter<int?> first = null, QueryBuilderParameter<string> after = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (first != null)
                args.Add(new() { ArgumentName = "first", ArgumentValue = first} );

            if (after != null)
                args.Add(new() { ArgumentName = "after", ArgumentValue = after} );

            return WithObjectField("fakturaer", alias, studentVedLarestedFakturaerConnectionQueryBuilder, [include, skip], args);
        }

        public StudentVedLarestedQueryBuilder ExceptFakturaer() => ExceptField("fakturaer");

        public StudentVedLarestedQueryBuilder WithFakturaerForInnevarendeTermin(FakturaQueryBuilder fakturaQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithObjectField("fakturaerForInnevarendeTermin", alias, fakturaQueryBuilder, [include, skip]);

        public StudentVedLarestedQueryBuilder ExceptFakturaerForInnevarendeTermin() => ExceptField("fakturaerForInnevarendeTermin");

        public StudentVedLarestedQueryBuilder WithVurderingsmeldinger(VurderingsmeldingQueryBuilder vurderingsmeldingQueryBuilder, QueryBuilderParameter<StudentVedLarestedVurderingsmeldingerFilterInput> filter = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (filter != null)
                args.Add(new() { ArgumentName = "filter", ArgumentValue = filter} );

            return WithObjectField("vurderingsmeldinger", alias, vurderingsmeldingQueryBuilder, [include, skip], args);
        }

        public StudentVedLarestedQueryBuilder ExceptVurderingsmeldinger() => ExceptField("vurderingsmeldinger");

        public StudentVedLarestedQueryBuilder WithEksamenstilpasningssoknader(EksamenstilpasningssoknadQueryBuilder eksamenstilpasningssoknadQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithObjectField("eksamenstilpasningssoknader", alias, eksamenstilpasningssoknadQueryBuilder, [include, skip]);

        public StudentVedLarestedQueryBuilder ExceptEksamenstilpasningssoknader() => ExceptField("eksamenstilpasningssoknader");

        public StudentVedLarestedQueryBuilder WithSoknaderOmEkstraVurderingsforsok(SoknadOmEkstraVurderingsforsokQueryBuilder soknadOmEkstraVurderingsforsokQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithObjectField("soknaderOmEkstraVurderingsforsok", alias, soknadOmEkstraVurderingsforsokQueryBuilder, [include, skip]);

        public StudentVedLarestedQueryBuilder ExceptSoknaderOmEkstraVurderingsforsok() => ExceptField("soknaderOmEkstraVurderingsforsok");

        public StudentVedLarestedQueryBuilder WithUndervisningstilpasninger(UndervisningstilpasningQueryBuilder undervisningstilpasningQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithObjectField("undervisningstilpasninger", alias, undervisningstilpasningQueryBuilder, [include, skip]);

        public StudentVedLarestedQueryBuilder ExceptUndervisningstilpasninger() => ExceptField("undervisningstilpasninger");

        public StudentVedLarestedQueryBuilder WithBilde(PersonbildeQueryBuilder personbildeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithObjectField("bilde", alias, personbildeQueryBuilder, [include, skip]);

        public StudentVedLarestedQueryBuilder ExceptBilde() => ExceptField("bilde");

        public StudentVedLarestedQueryBuilder WithUtreisendeUtveksling(UtreisendeUtvekslingQueryBuilder utreisendeUtvekslingQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithObjectField("utreisendeUtveksling", alias, utreisendeUtvekslingQueryBuilder, [include, skip]);

        public StudentVedLarestedQueryBuilder ExceptUtreisendeUtveksling() => ExceptField("utreisendeUtveksling");

        public StudentVedLarestedQueryBuilder WithResultaterV2(StudentVedLarestedResultaterV2ConnectionQueryBuilder studentVedLarestedResultaterV2ConnectionQueryBuilder, QueryBuilderParameter<int?> first = null, QueryBuilderParameter<string> after = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (first != null)
                args.Add(new() { ArgumentName = "first", ArgumentValue = first} );

            if (after != null)
                args.Add(new() { ArgumentName = "after", ArgumentValue = after} );

            return WithObjectField("resultaterV2", alias, studentVedLarestedResultaterV2ConnectionQueryBuilder, [include, skip], args);
        }

        public StudentVedLarestedQueryBuilder ExceptResultaterV2() => ExceptField("resultaterV2");

        public StudentVedLarestedQueryBuilder WithVurderingsforsokForEmner(VurderingsforsokForEmneQueryBuilder vurderingsforsokForEmneQueryBuilder, QueryBuilderParameter<IEnumerable<EmnekodeInput>> emnekoder = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (emnekoder != null)
                args.Add(new() { ArgumentName = "emnekoder", ArgumentValue = emnekoder} );

            return WithObjectField("vurderingsforsokForEmner", alias, vurderingsforsokForEmneQueryBuilder, [include, skip], args);
        }

        public StudentVedLarestedQueryBuilder ExceptVurderingsforsokForEmner() => ExceptField("vurderingsforsokForEmner");

        public StudentVedLarestedQueryBuilder WithGodkjentePolitiattester(GodkjentPolitiattestQueryBuilder godkjentPolitiattestQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithObjectField("godkjentePolitiattester", alias, godkjentPolitiattestQueryBuilder, [include, skip]);

        public StudentVedLarestedQueryBuilder ExceptGodkjentePolitiattester() => ExceptField("godkjentePolitiattester");

        public StudentVedLarestedQueryBuilder WithPolitiattestKrav(PolitiattestkravStudentQueryBuilder politiattestkravStudentQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithObjectField("politiattestKrav", alias, politiattestkravStudentQueryBuilder, [include, skip]);

        public StudentVedLarestedQueryBuilder ExceptPolitiattestKrav() => ExceptField("politiattestKrav");

        public StudentVedLarestedQueryBuilder WithArbeidsadresse(ArbeidsadresseForStudentQueryBuilder arbeidsadresseForStudentQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithObjectField("arbeidsadresse", alias, arbeidsadresseForStudentQueryBuilder, [include, skip]);

        public StudentVedLarestedQueryBuilder ExceptArbeidsadresse() => ExceptField("arbeidsadresse");

        public StudentVedLarestedQueryBuilder WithKanOverforesTilLms(string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithScalarField("kanOverforesTilLms", alias, [include, skip]);

        public StudentVedLarestedQueryBuilder ExceptKanOverforesTilLms() => ExceptField("kanOverforesTilLms");

        public StudentVedLarestedQueryBuilder WithEnkeltemner(StudentVedLarestedEnkeltemnerConnectionQueryBuilder studentVedLarestedEnkeltemnerConnectionQueryBuilder, QueryBuilderParameter<int?> first = null, QueryBuilderParameter<string> after = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (first != null)
                args.Add(new() { ArgumentName = "first", ArgumentValue = first} );

            if (after != null)
                args.Add(new() { ArgumentName = "after", ArgumentValue = after} );

            return WithObjectField("enkeltemner", alias, studentVedLarestedEnkeltemnerConnectionQueryBuilder, [include, skip], args);
        }

        public StudentVedLarestedQueryBuilder ExceptEnkeltemner() => ExceptField("enkeltemner");

        public StudentVedLarestedQueryBuilder WithKriseKontaktperson(KriseKontaktpersonQueryBuilder kriseKontaktpersonQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithObjectField("kriseKontaktperson", alias, kriseKontaktpersonQueryBuilder, [include, skip]);

        public StudentVedLarestedQueryBuilder ExceptKriseKontaktperson() => ExceptField("kriseKontaktperson");

        public StudentVedLarestedQueryBuilder WithEmneSoknader(StudentVedLarestedEmneSoknaderConnectionQueryBuilder studentVedLarestedEmneSoknaderConnectionQueryBuilder, QueryBuilderParameter<StudentVedLarestedEmneSoknaderFilterInput> filter = null, QueryBuilderParameter<int?> first = null, QueryBuilderParameter<string> after = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (filter != null)
                args.Add(new() { ArgumentName = "filter", ArgumentValue = filter} );

            if (first != null)
                args.Add(new() { ArgumentName = "first", ArgumentValue = first} );

            if (after != null)
                args.Add(new() { ArgumentName = "after", ArgumentValue = after} );

            return WithObjectField("emneSoknader", alias, studentVedLarestedEmneSoknaderConnectionQueryBuilder, [include, skip], args);
        }

        public StudentVedLarestedQueryBuilder ExceptEmneSoknader() => ExceptField("emneSoknader");

        public StudentVedLarestedQueryBuilder WithEmnerIUtdanningsplaner(StudentVedLarestedEmnerIUtdanningsplanerConnectionQueryBuilder studentVedLarestedEmnerIUtdanningsplanerConnectionQueryBuilder, QueryBuilderParameter<StudentVedLarestedEmnerIUtdanningsplanerFilterInput> filter = null, QueryBuilderParameter<int?> first = null, QueryBuilderParameter<string> after = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (filter != null)
                args.Add(new() { ArgumentName = "filter", ArgumentValue = filter} );

            if (first != null)
                args.Add(new() { ArgumentName = "first", ArgumentValue = first} );

            if (after != null)
                args.Add(new() { ArgumentName = "after", ArgumentValue = after} );

            return WithObjectField("emnerIUtdanningsplaner", alias, studentVedLarestedEmnerIUtdanningsplanerConnectionQueryBuilder, [include, skip], args);
        }

        public StudentVedLarestedQueryBuilder ExceptEmnerIUtdanningsplaner() => ExceptField("emnerIUtdanningsplaner");

        public StudentVedLarestedQueryBuilder WithOppnaddKvalifikasjon(OppnaddKvalifikasjonQueryBuilder oppnaddKvalifikasjonQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithObjectField("oppnaddKvalifikasjon", alias, oppnaddKvalifikasjonQueryBuilder, [include, skip]);

        public StudentVedLarestedQueryBuilder ExceptOppnaddKvalifikasjon() => ExceptField("oppnaddKvalifikasjon");

        public StudentVedLarestedQueryBuilder WithUndervisningsaktivitetsonsker(StudentVedLarestedUndervisningsaktivitetsonskerConnectionQueryBuilder studentVedLarestedUndervisningsaktivitetsonskerConnectionQueryBuilder, QueryBuilderParameter<int?> first = null, QueryBuilderParameter<string> after = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (first != null)
                args.Add(new() { ArgumentName = "first", ArgumentValue = first} );

            if (after != null)
                args.Add(new() { ArgumentName = "after", ArgumentValue = after} );

            return WithObjectField("undervisningsaktivitetsonsker", alias, studentVedLarestedUndervisningsaktivitetsonskerConnectionQueryBuilder, [include, skip], args);
        }

        public StudentVedLarestedQueryBuilder ExceptUndervisningsaktivitetsonsker() => ExceptField("undervisningsaktivitetsonsker");
    }
}
