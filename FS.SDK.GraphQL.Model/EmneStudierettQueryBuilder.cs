// <auto-generated> This file has been auto generated. </auto-generated>

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;
#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
using Newtonsoft.Json;
#endif

namespace FS.SDK.GraphQL.Model
{
    public partial class EmneStudierettQueryBuilder : GraphQlQueryBuilder<EmneStudierettQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
        {
            new() { Name = "id" },
            new() { Name = "emne", IsComplex = true, QueryBuilderType = typeof(EmneQueryBuilder) },
            new() { Name = "termin", IsComplex = true, QueryBuilderType = typeof(TerminQueryBuilder) },
            new() { Name = "terminnummer" },
            new() { Name = "campus", IsComplex = true, QueryBuilderType = typeof(CampusQueryBuilder) },
            new() { Name = "undervisningstilpasning", IsComplex = true, QueryBuilderType = typeof(UndervisningstilpasningQueryBuilder) },
            new() { Name = "student", IsComplex = true, QueryBuilderType = typeof(StudentVedLarestedQueryBuilder) },
            new() { Name = "resultater", IsComplex = true, QueryBuilderType = typeof(EmneStudierettResultaterConnectionQueryBuilder) },
            new() { Name = "opptakKanPubliseres" },
            new() { Name = "undervisningspartiPlasseringer", IsComplex = true, QueryBuilderType = typeof(UndervisningspartiplasseringQueryBuilder) },
            new() { Name = "fellesundervisning", IsComplex = true, QueryBuilderType = typeof(EmneStudierettFellesundervisningConnectionQueryBuilder) },
            new() { Name = "undervisningsaktivitetsonsker", IsComplex = true, QueryBuilderType = typeof(EmneStudierettUndervisningsaktivitetsonskerConnectionQueryBuilder) }
        };

        protected override string TypeName => "EmneStudierett";

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields => AllFieldMetadata;

        public EmneStudierettQueryBuilder WithId(string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithScalarField("id", alias, [include, skip]);

        public EmneStudierettQueryBuilder ExceptId() => ExceptField("id");

        public EmneStudierettQueryBuilder WithEmne(EmneQueryBuilder emneQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithObjectField("emne", alias, emneQueryBuilder, [include, skip]);

        public EmneStudierettQueryBuilder ExceptEmne() => ExceptField("emne");

        public EmneStudierettQueryBuilder WithTermin(TerminQueryBuilder terminQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithObjectField("termin", alias, terminQueryBuilder, [include, skip]);

        public EmneStudierettQueryBuilder ExceptTermin() => ExceptField("termin");

        public EmneStudierettQueryBuilder WithTerminnummer(string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithScalarField("terminnummer", alias, [include, skip]);

        public EmneStudierettQueryBuilder ExceptTerminnummer() => ExceptField("terminnummer");

        public EmneStudierettQueryBuilder WithCampus(CampusQueryBuilder campusQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithObjectField("campus", alias, campusQueryBuilder, [include, skip]);

        public EmneStudierettQueryBuilder ExceptCampus() => ExceptField("campus");

        public EmneStudierettQueryBuilder WithUndervisningstilpasning(UndervisningstilpasningQueryBuilder undervisningstilpasningQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithObjectField("undervisningstilpasning", alias, undervisningstilpasningQueryBuilder, [include, skip]);

        public EmneStudierettQueryBuilder ExceptUndervisningstilpasning() => ExceptField("undervisningstilpasning");

        public EmneStudierettQueryBuilder WithStudent(StudentVedLarestedQueryBuilder studentVedLarestedQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithObjectField("student", alias, studentVedLarestedQueryBuilder, [include, skip]);

        public EmneStudierettQueryBuilder ExceptStudent() => ExceptField("student");

        public EmneStudierettQueryBuilder WithResultater(EmneStudierettResultaterConnectionQueryBuilder emneStudierettResultaterConnectionQueryBuilder, QueryBuilderParameter<EmneStudierettResultaterFilterInput> filter = null, QueryBuilderParameter<int?> first = null, QueryBuilderParameter<string> after = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (filter != null)
                args.Add(new() { ArgumentName = "filter", ArgumentValue = filter} );

            if (first != null)
                args.Add(new() { ArgumentName = "first", ArgumentValue = first} );

            if (after != null)
                args.Add(new() { ArgumentName = "after", ArgumentValue = after} );

            return WithObjectField("resultater", alias, emneStudierettResultaterConnectionQueryBuilder, [include, skip], args);
        }

        public EmneStudierettQueryBuilder ExceptResultater() => ExceptField("resultater");

        public EmneStudierettQueryBuilder WithOpptakKanPubliseres(string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithScalarField("opptakKanPubliseres", alias, [include, skip]);

        public EmneStudierettQueryBuilder ExceptOpptakKanPubliseres() => ExceptField("opptakKanPubliseres");

        public EmneStudierettQueryBuilder WithUndervisningspartiPlasseringer(UndervisningspartiplasseringQueryBuilder undervisningspartiplasseringQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithObjectField("undervisningspartiPlasseringer", alias, undervisningspartiplasseringQueryBuilder, [include, skip]);

        public EmneStudierettQueryBuilder ExceptUndervisningspartiPlasseringer() => ExceptField("undervisningspartiPlasseringer");

        public EmneStudierettQueryBuilder WithFellesundervisning(EmneStudierettFellesundervisningConnectionQueryBuilder emneStudierettFellesundervisningConnectionQueryBuilder, QueryBuilderParameter<int?> first = null, QueryBuilderParameter<string> after = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (first != null)
                args.Add(new() { ArgumentName = "first", ArgumentValue = first} );

            if (after != null)
                args.Add(new() { ArgumentName = "after", ArgumentValue = after} );

            return WithObjectField("fellesundervisning", alias, emneStudierettFellesundervisningConnectionQueryBuilder, [include, skip], args);
        }

        public EmneStudierettQueryBuilder ExceptFellesundervisning() => ExceptField("fellesundervisning");

        public EmneStudierettQueryBuilder WithUndervisningsaktivitetsonsker(EmneStudierettUndervisningsaktivitetsonskerConnectionQueryBuilder emneStudierettUndervisningsaktivitetsonskerConnectionQueryBuilder, QueryBuilderParameter<int?> first = null, QueryBuilderParameter<string> after = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (first != null)
                args.Add(new() { ArgumentName = "first", ArgumentValue = first} );

            if (after != null)
                args.Add(new() { ArgumentName = "after", ArgumentValue = after} );

            return WithObjectField("undervisningsaktivitetsonsker", alias, emneStudierettUndervisningsaktivitetsonskerConnectionQueryBuilder, [include, skip], args);
        }

        public EmneStudierettQueryBuilder ExceptUndervisningsaktivitetsonsker() => ExceptField("undervisningsaktivitetsonsker");
    }
}
