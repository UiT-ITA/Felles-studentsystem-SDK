// <auto-generated> This file has been auto generated. </auto-generated>

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;
#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
using Newtonsoft.Json;
#endif

namespace FS.SDK.GraphQL.Model
{
    public partial class SensoroppdragQueryBuilder : GraphQlQueryBuilder<SensoroppdragQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
        {
            new() { Name = "id" },
            new() { Name = "fagperson", IsComplex = true, QueryBuilderType = typeof(FagpersonVedLarestedQueryBuilder) },
            new() { Name = "kommisjon", IsComplex = true, QueryBuilderType = typeof(KommisjonQueryBuilder) },
            new() { Name = "sensorrolle", IsComplex = true, QueryBuilderType = typeof(SensorrolleQueryBuilder) }
        };

        protected override string TypeName => "Sensoroppdrag";

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields => AllFieldMetadata;

        public SensoroppdragQueryBuilder WithId(string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithScalarField("id", alias, [include, skip]);

        public SensoroppdragQueryBuilder ExceptId() => ExceptField("id");

        public SensoroppdragQueryBuilder WithFagperson(FagpersonVedLarestedQueryBuilder fagpersonVedLarestedQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithObjectField("fagperson", alias, fagpersonVedLarestedQueryBuilder, [include, skip]);

        public SensoroppdragQueryBuilder ExceptFagperson() => ExceptField("fagperson");

        public SensoroppdragQueryBuilder WithKommisjon(KommisjonQueryBuilder kommisjonQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithObjectField("kommisjon", alias, kommisjonQueryBuilder, [include, skip]);

        public SensoroppdragQueryBuilder ExceptKommisjon() => ExceptField("kommisjon");

        public SensoroppdragQueryBuilder WithSensorrolle(SensorrolleQueryBuilder sensorrolleQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithObjectField("sensorrolle", alias, sensorrolleQueryBuilder, [include, skip]);

        public SensoroppdragQueryBuilder ExceptSensorrolle() => ExceptField("sensorrolle");
    }
}
