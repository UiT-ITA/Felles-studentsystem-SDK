// <auto-generated> This file has been auto generated. </auto-generated>

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;
#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
using Newtonsoft.Json;
#endif

namespace FS.SDK.GraphQL.Model
{
    public partial class RegistrerUtdanningsregisterIderForStudieprogramPayloadQueryBuilder : GraphQlQueryBuilder<RegistrerUtdanningsregisterIderForStudieprogramPayloadQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
        {
            new() { Name = "studieprogram", IsComplex = true, QueryBuilderType = typeof(StudieprogramQueryBuilder) },
            new() { Name = "errors", IsComplex = true, QueryBuilderType = typeof(RegistrerUtdanningsregisterIderForStudieprogramErrorQueryBuilder) }
        };

        protected override string TypeName => "RegistrerUtdanningsregisterIderForStudieprogramPayload";

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields => AllFieldMetadata;

        public RegistrerUtdanningsregisterIderForStudieprogramPayloadQueryBuilder WithStudieprogram(StudieprogramQueryBuilder studieprogramQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithObjectField("studieprogram", alias, studieprogramQueryBuilder, [include, skip]);

        public RegistrerUtdanningsregisterIderForStudieprogramPayloadQueryBuilder ExceptStudieprogram() => ExceptField("studieprogram");

        public RegistrerUtdanningsregisterIderForStudieprogramPayloadQueryBuilder WithErrors(RegistrerUtdanningsregisterIderForStudieprogramErrorQueryBuilder registrerUtdanningsregisterIderForStudieprogramErrorQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithObjectField("errors", alias, registrerUtdanningsregisterIderForStudieprogramErrorQueryBuilder, [include, skip]);

        public RegistrerUtdanningsregisterIderForStudieprogramPayloadQueryBuilder ExceptErrors() => ExceptField("errors");
    }
}
