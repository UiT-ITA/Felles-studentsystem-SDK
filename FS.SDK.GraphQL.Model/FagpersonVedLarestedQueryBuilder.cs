// <auto-generated> This file has been auto generated. </auto-generated>

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;
#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
using Newtonsoft.Json;
#endif

namespace FS.SDK.GraphQL.Model
{
    public partial class FagpersonVedLarestedQueryBuilder : GraphQlQueryBuilder<FagpersonVedLarestedQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
        {
            new() { Name = "id" },
            new() { Name = "erAktiv" },
            new() { Name = "erEkstern" },
            new() { Name = "personProfil", IsComplex = true, QueryBuilderType = typeof(PersonProfilQueryBuilder) },
            new() { Name = "ansattVed", IsComplex = true, QueryBuilderType = typeof(OrganisasjonsenhetQueryBuilder) },
            new() { Name = "campus", IsComplex = true, QueryBuilderType = typeof(CampusQueryBuilder) },
            new() { Name = "stillingstittelAlleSprak", IsComplex = true, QueryBuilderType = typeof(FagpersonVedLarestedStillingstittelAlleSprakQueryBuilder) },
            new() { Name = "romPlassering", IsComplex = true, QueryBuilderType = typeof(RomQueryBuilder) },
            new() { Name = "permisjon" },
            new() { Name = "arbeidsadresse", IsComplex = true, QueryBuilderType = typeof(ArbeidsadresseForFagpersonQueryBuilder) },
            new() { Name = "bilde", IsComplex = true, QueryBuilderType = typeof(PersonbildeQueryBuilder) },
            new() { Name = "navn", IsComplex = true, QueryBuilderType = typeof(PersonnavnQueryBuilder) },
            new() { Name = "emneroller", IsComplex = true, QueryBuilderType = typeof(FagpersonVedLarestedEmnerollerConnectionQueryBuilder) },
            new() { Name = "studieprogramroller", IsComplex = true, QueryBuilderType = typeof(StudieprogramrolleQueryBuilder) },
            new() { Name = "kullroller", IsComplex = true, QueryBuilderType = typeof(KullrolleQueryBuilder) },
            new() { Name = "klasseroller", IsComplex = true, QueryBuilderType = typeof(KlasserolleQueryBuilder) },
            new() { Name = "organisasjonsenhetsroller", IsComplex = true, QueryBuilderType = typeof(OrganisasjonsenhetsrolleQueryBuilder) },
            new() { Name = "timeplanroller", IsComplex = true, QueryBuilderType = typeof(TimeplanrolleQueryBuilder) },
            new() { Name = "undervisningsenhetsroller", IsComplex = true, QueryBuilderType = typeof(UndervisningsenhetsrolleQueryBuilder) },
            new() { Name = "undervisningsaktivitetsroller", IsComplex = true, QueryBuilderType = typeof(UndervisningsaktivitetsrolleQueryBuilder) },
            new() { Name = "kanOverforesTilLms" },
            new() { Name = "evuKursroller", IsComplex = true, QueryBuilderType = typeof(EvuKursrolleQueryBuilder) },
            new() { Name = "fagpersonKategori", IsComplex = true, QueryBuilderType = typeof(FagpersonkategoriQueryBuilder) },
            new() { Name = "fag", IsComplex = true, QueryBuilderType = typeof(FagQueryBuilder) },
            new() { Name = "instrumenter", IsComplex = true, QueryBuilderType = typeof(InstrumentQueryBuilder) }
        };

        protected override string TypeName => "FagpersonVedLarested";

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields => AllFieldMetadata;

        public FagpersonVedLarestedQueryBuilder WithId(string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithScalarField("id", alias, [include, skip]);

        public FagpersonVedLarestedQueryBuilder ExceptId() => ExceptField("id");

        public FagpersonVedLarestedQueryBuilder WithErAktiv(string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithScalarField("erAktiv", alias, [include, skip]);

        public FagpersonVedLarestedQueryBuilder ExceptErAktiv() => ExceptField("erAktiv");

        public FagpersonVedLarestedQueryBuilder WithErEkstern(string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithScalarField("erEkstern", alias, [include, skip]);

        public FagpersonVedLarestedQueryBuilder ExceptErEkstern() => ExceptField("erEkstern");

        public FagpersonVedLarestedQueryBuilder WithPersonProfil(PersonProfilQueryBuilder personProfilQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithObjectField("personProfil", alias, personProfilQueryBuilder, [include, skip]);

        public FagpersonVedLarestedQueryBuilder ExceptPersonProfil() => ExceptField("personProfil");

        public FagpersonVedLarestedQueryBuilder WithAnsattVed(OrganisasjonsenhetQueryBuilder organisasjonsenhetQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithObjectField("ansattVed", alias, organisasjonsenhetQueryBuilder, [include, skip]);

        public FagpersonVedLarestedQueryBuilder ExceptAnsattVed() => ExceptField("ansattVed");

        public FagpersonVedLarestedQueryBuilder WithCampus(CampusQueryBuilder campusQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithObjectField("campus", alias, campusQueryBuilder, [include, skip]);

        public FagpersonVedLarestedQueryBuilder ExceptCampus() => ExceptField("campus");

        public FagpersonVedLarestedQueryBuilder WithStillingstittelAlleSprak(FagpersonVedLarestedStillingstittelAlleSprakQueryBuilder fagpersonVedLarestedStillingstittelAlleSprakQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithObjectField("stillingstittelAlleSprak", alias, fagpersonVedLarestedStillingstittelAlleSprakQueryBuilder, [include, skip]);

        public FagpersonVedLarestedQueryBuilder ExceptStillingstittelAlleSprak() => ExceptField("stillingstittelAlleSprak");

        public FagpersonVedLarestedQueryBuilder WithRomPlassering(RomQueryBuilder romQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithObjectField("romPlassering", alias, romQueryBuilder, [include, skip]);

        public FagpersonVedLarestedQueryBuilder ExceptRomPlassering() => ExceptField("romPlassering");

        public FagpersonVedLarestedQueryBuilder WithPermisjon(string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithScalarField("permisjon", alias, [include, skip]);

        public FagpersonVedLarestedQueryBuilder ExceptPermisjon() => ExceptField("permisjon");

        public FagpersonVedLarestedQueryBuilder WithArbeidsadresse(ArbeidsadresseForFagpersonQueryBuilder arbeidsadresseForFagpersonQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithObjectField("arbeidsadresse", alias, arbeidsadresseForFagpersonQueryBuilder, [include, skip]);

        public FagpersonVedLarestedQueryBuilder ExceptArbeidsadresse() => ExceptField("arbeidsadresse");

        public FagpersonVedLarestedQueryBuilder WithBilde(PersonbildeQueryBuilder personbildeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithObjectField("bilde", alias, personbildeQueryBuilder, [include, skip]);

        public FagpersonVedLarestedQueryBuilder ExceptBilde() => ExceptField("bilde");

        public FagpersonVedLarestedQueryBuilder WithNavn(PersonnavnQueryBuilder personnavnQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithObjectField("navn", alias, personnavnQueryBuilder, [include, skip]);

        public FagpersonVedLarestedQueryBuilder ExceptNavn() => ExceptField("navn");

        public FagpersonVedLarestedQueryBuilder WithEmneroller(FagpersonVedLarestedEmnerollerConnectionQueryBuilder fagpersonVedLarestedEmnerollerConnectionQueryBuilder, QueryBuilderParameter<FagpersonEmnerollerFilter> filter = null, QueryBuilderParameter<int?> first = null, QueryBuilderParameter<string> after = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (filter != null)
                args.Add(new() { ArgumentName = "filter", ArgumentValue = filter} );

            if (first != null)
                args.Add(new() { ArgumentName = "first", ArgumentValue = first} );

            if (after != null)
                args.Add(new() { ArgumentName = "after", ArgumentValue = after} );

            return WithObjectField("emneroller", alias, fagpersonVedLarestedEmnerollerConnectionQueryBuilder, [include, skip], args);
        }

        public FagpersonVedLarestedQueryBuilder ExceptEmneroller() => ExceptField("emneroller");

        public FagpersonVedLarestedQueryBuilder WithStudieprogramroller(StudieprogramrolleQueryBuilder studieprogramrolleQueryBuilder, QueryBuilderParameter<FagpersonStudieprogramrollerFilter> filter = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (filter != null)
                args.Add(new() { ArgumentName = "filter", ArgumentValue = filter} );

            return WithObjectField("studieprogramroller", alias, studieprogramrolleQueryBuilder, [include, skip], args);
        }

        public FagpersonVedLarestedQueryBuilder ExceptStudieprogramroller() => ExceptField("studieprogramroller");

        public FagpersonVedLarestedQueryBuilder WithKullroller(KullrolleQueryBuilder kullrolleQueryBuilder, QueryBuilderParameter<FagpersonKullrollerFilter> filter = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (filter != null)
                args.Add(new() { ArgumentName = "filter", ArgumentValue = filter} );

            return WithObjectField("kullroller", alias, kullrolleQueryBuilder, [include, skip], args);
        }

        public FagpersonVedLarestedQueryBuilder ExceptKullroller() => ExceptField("kullroller");

        public FagpersonVedLarestedQueryBuilder WithKlasseroller(KlasserolleQueryBuilder klasserolleQueryBuilder, QueryBuilderParameter<FagpersonKlasserollerFilter> filter = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (filter != null)
                args.Add(new() { ArgumentName = "filter", ArgumentValue = filter} );

            return WithObjectField("klasseroller", alias, klasserolleQueryBuilder, [include, skip], args);
        }

        public FagpersonVedLarestedQueryBuilder ExceptKlasseroller() => ExceptField("klasseroller");

        public FagpersonVedLarestedQueryBuilder WithOrganisasjonsenhetsroller(OrganisasjonsenhetsrolleQueryBuilder organisasjonsenhetsrolleQueryBuilder, QueryBuilderParameter<FagpersonOrganisasjonsenhetsrollerFilter> filter = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (filter != null)
                args.Add(new() { ArgumentName = "filter", ArgumentValue = filter} );

            return WithObjectField("organisasjonsenhetsroller", alias, organisasjonsenhetsrolleQueryBuilder, [include, skip], args);
        }

        public FagpersonVedLarestedQueryBuilder ExceptOrganisasjonsenhetsroller() => ExceptField("organisasjonsenhetsroller");

        public FagpersonVedLarestedQueryBuilder WithTimeplanroller(TimeplanrolleQueryBuilder timeplanrolleQueryBuilder, QueryBuilderParameter<FagpersonTimeplanrollerFilter> filter = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (filter != null)
                args.Add(new() { ArgumentName = "filter", ArgumentValue = filter} );

            return WithObjectField("timeplanroller", alias, timeplanrolleQueryBuilder, [include, skip], args);
        }

        public FagpersonVedLarestedQueryBuilder ExceptTimeplanroller() => ExceptField("timeplanroller");

        public FagpersonVedLarestedQueryBuilder WithUndervisningsenhetsroller(UndervisningsenhetsrolleQueryBuilder undervisningsenhetsrolleQueryBuilder, QueryBuilderParameter<FagpersonUndervisningsenhetsrollerFilterInput> filter = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (filter != null)
                args.Add(new() { ArgumentName = "filter", ArgumentValue = filter} );

            return WithObjectField("undervisningsenhetsroller", alias, undervisningsenhetsrolleQueryBuilder, [include, skip], args);
        }

        public FagpersonVedLarestedQueryBuilder ExceptUndervisningsenhetsroller() => ExceptField("undervisningsenhetsroller");

        public FagpersonVedLarestedQueryBuilder WithUndervisningsaktivitetsroller(UndervisningsaktivitetsrolleQueryBuilder undervisningsaktivitetsrolleQueryBuilder, QueryBuilderParameter<FagpersonUndervisningsaktivitetsrollerFilter> filter = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (filter != null)
                args.Add(new() { ArgumentName = "filter", ArgumentValue = filter} );

            return WithObjectField("undervisningsaktivitetsroller", alias, undervisningsaktivitetsrolleQueryBuilder, [include, skip], args);
        }

        public FagpersonVedLarestedQueryBuilder ExceptUndervisningsaktivitetsroller() => ExceptField("undervisningsaktivitetsroller");

        public FagpersonVedLarestedQueryBuilder WithKanOverforesTilLms(string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithScalarField("kanOverforesTilLms", alias, [include, skip]);

        public FagpersonVedLarestedQueryBuilder ExceptKanOverforesTilLms() => ExceptField("kanOverforesTilLms");

        public FagpersonVedLarestedQueryBuilder WithEvuKursroller(EvuKursrolleQueryBuilder evuKursrolleQueryBuilder, QueryBuilderParameter<FagpersonKursrollerFilter> filter = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (filter != null)
                args.Add(new() { ArgumentName = "filter", ArgumentValue = filter} );

            return WithObjectField("evuKursroller", alias, evuKursrolleQueryBuilder, [include, skip], args);
        }

        public FagpersonVedLarestedQueryBuilder ExceptEvuKursroller() => ExceptField("evuKursroller");

        public FagpersonVedLarestedQueryBuilder WithFagpersonKategori(FagpersonkategoriQueryBuilder fagpersonkategoriQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithObjectField("fagpersonKategori", alias, fagpersonkategoriQueryBuilder, [include, skip]);

        public FagpersonVedLarestedQueryBuilder ExceptFagpersonKategori() => ExceptField("fagpersonKategori");

        public FagpersonVedLarestedQueryBuilder WithFag(FagQueryBuilder fagQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithObjectField("fag", alias, fagQueryBuilder, [include, skip]);

        public FagpersonVedLarestedQueryBuilder ExceptFag() => ExceptField("fag");

        public FagpersonVedLarestedQueryBuilder WithInstrumenter(InstrumentQueryBuilder instrumentQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithObjectField("instrumenter", alias, instrumentQueryBuilder, [include, skip]);

        public FagpersonVedLarestedQueryBuilder ExceptInstrumenter() => ExceptField("instrumenter");
    }
}
