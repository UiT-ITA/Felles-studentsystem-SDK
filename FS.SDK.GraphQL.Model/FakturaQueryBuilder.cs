// <auto-generated> This file has been auto generated. </auto-generated>

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;
#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
using Newtonsoft.Json;
#endif

namespace FS.SDK.GraphQL.Model
{
    public partial class FakturaQueryBuilder : GraphQlQueryBuilder<FakturaQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
        {
            new() { Name = "id" },
            new() { Name = "fakturadato" },
            new() { Name = "termin", IsComplex = true, QueryBuilderType = typeof(TerminQueryBuilder) },
            new() { Name = "betalingsfrist" },
            new() { Name = "fakturareferanse" },
            new() { Name = "detaljer", IsComplex = true, QueryBuilderType = typeof(FakturadetaljQueryBuilder) },
            new() { Name = "belop" },
            new() { Name = "kidNummer" },
            new() { Name = "betalt" },
            new() { Name = "innbetaltBelop" },
            new() { Name = "refundertBelop" }
        };

        protected override string TypeName => "Faktura";

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields => AllFieldMetadata;

        public FakturaQueryBuilder WithId(string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithScalarField("id", alias, [include, skip]);

        public FakturaQueryBuilder ExceptId() => ExceptField("id");

        public FakturaQueryBuilder WithFakturadato(string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithScalarField("fakturadato", alias, [include, skip]);

        public FakturaQueryBuilder ExceptFakturadato() => ExceptField("fakturadato");

        public FakturaQueryBuilder WithTermin(TerminQueryBuilder terminQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithObjectField("termin", alias, terminQueryBuilder, [include, skip]);

        public FakturaQueryBuilder ExceptTermin() => ExceptField("termin");

        public FakturaQueryBuilder WithBetalingsfrist(string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithScalarField("betalingsfrist", alias, [include, skip]);

        public FakturaQueryBuilder ExceptBetalingsfrist() => ExceptField("betalingsfrist");

        public FakturaQueryBuilder WithFakturareferanse(string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithScalarField("fakturareferanse", alias, [include, skip]);

        public FakturaQueryBuilder ExceptFakturareferanse() => ExceptField("fakturareferanse");

        public FakturaQueryBuilder WithDetaljer(FakturadetaljQueryBuilder fakturadetaljQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithObjectField("detaljer", alias, fakturadetaljQueryBuilder, [include, skip]);

        public FakturaQueryBuilder ExceptDetaljer() => ExceptField("detaljer");

        public FakturaQueryBuilder WithBelop(string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithScalarField("belop", alias, [include, skip]);

        public FakturaQueryBuilder ExceptBelop() => ExceptField("belop");

        public FakturaQueryBuilder WithKidNummer(string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithScalarField("kidNummer", alias, [include, skip]);

        public FakturaQueryBuilder ExceptKidNummer() => ExceptField("kidNummer");

        public FakturaQueryBuilder WithBetalt(string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithScalarField("betalt", alias, [include, skip]);

        public FakturaQueryBuilder ExceptBetalt() => ExceptField("betalt");

        public FakturaQueryBuilder WithInnbetaltBelop(string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithScalarField("innbetaltBelop", alias, [include, skip]);

        public FakturaQueryBuilder ExceptInnbetaltBelop() => ExceptField("innbetaltBelop");

        public FakturaQueryBuilder WithRefundertBelop(string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithScalarField("refundertBelop", alias, [include, skip]);

        public FakturaQueryBuilder ExceptRefundertBelop() => ExceptField("refundertBelop");
    }
}
