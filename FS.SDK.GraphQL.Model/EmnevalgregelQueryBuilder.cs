// <auto-generated> This file has been auto generated. </auto-generated>

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;
#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
using Newtonsoft.Json;
#endif

namespace FS.SDK.GraphQL.Model
{
    public partial class EmnevalgregelQueryBuilder : GraphQlQueryBuilder<EmnevalgregelQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
        {
            new() { Name = "id" },
            new() { Name = "kode" },
            new() { Name = "navnAlleSprak", IsComplex = true, QueryBuilderType = typeof(EmnevalgregelnavnAlleSprakQueryBuilder) },
            new() { Name = "beskrivelseAlleSprak", IsComplex = true, QueryBuilderType = typeof(EmnevalgregelBeskrivelseAlleSprakQueryBuilder) },
            new() { Name = "erAktiv" },
            new() { Name = "erObligatorisk" },
            new() { Name = "felleskode" },
            new() { Name = "maksimumAntallEmner" },
            new() { Name = "minimumAntallEmner" },
            new() { Name = "vekting", IsComplex = true, QueryBuilderType = typeof(EmnevalgregelVektingQueryBuilder) }
        };

        protected override string TypeName => "Emnevalgregel";

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields => AllFieldMetadata;

        public EmnevalgregelQueryBuilder WithId(string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithScalarField("id", alias, [include, skip]);

        public EmnevalgregelQueryBuilder ExceptId() => ExceptField("id");

        public EmnevalgregelQueryBuilder WithKode(string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithScalarField("kode", alias, [include, skip]);

        public EmnevalgregelQueryBuilder ExceptKode() => ExceptField("kode");

        public EmnevalgregelQueryBuilder WithNavnAlleSprak(EmnevalgregelnavnAlleSprakQueryBuilder emnevalgregelnavnAlleSprakQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithObjectField("navnAlleSprak", alias, emnevalgregelnavnAlleSprakQueryBuilder, [include, skip]);

        public EmnevalgregelQueryBuilder ExceptNavnAlleSprak() => ExceptField("navnAlleSprak");

        public EmnevalgregelQueryBuilder WithBeskrivelseAlleSprak(EmnevalgregelBeskrivelseAlleSprakQueryBuilder emnevalgregelBeskrivelseAlleSprakQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithObjectField("beskrivelseAlleSprak", alias, emnevalgregelBeskrivelseAlleSprakQueryBuilder, [include, skip]);

        public EmnevalgregelQueryBuilder ExceptBeskrivelseAlleSprak() => ExceptField("beskrivelseAlleSprak");

        public EmnevalgregelQueryBuilder WithErAktiv(string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithScalarField("erAktiv", alias, [include, skip]);

        public EmnevalgregelQueryBuilder ExceptErAktiv() => ExceptField("erAktiv");

        public EmnevalgregelQueryBuilder WithErObligatorisk(string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithScalarField("erObligatorisk", alias, [include, skip]);

        public EmnevalgregelQueryBuilder ExceptErObligatorisk() => ExceptField("erObligatorisk");

        public EmnevalgregelQueryBuilder WithFelleskode(string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithScalarField("felleskode", alias, [include, skip]);

        public EmnevalgregelQueryBuilder ExceptFelleskode() => ExceptField("felleskode");

        public EmnevalgregelQueryBuilder WithMaksimumAntallEmner(string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithScalarField("maksimumAntallEmner", alias, [include, skip]);

        public EmnevalgregelQueryBuilder ExceptMaksimumAntallEmner() => ExceptField("maksimumAntallEmner");

        public EmnevalgregelQueryBuilder WithMinimumAntallEmner(string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithScalarField("minimumAntallEmner", alias, [include, skip]);

        public EmnevalgregelQueryBuilder ExceptMinimumAntallEmner() => ExceptField("minimumAntallEmner");

        public EmnevalgregelQueryBuilder WithVekting(EmnevalgregelVektingQueryBuilder emnevalgregelVektingQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithObjectField("vekting", alias, emnevalgregelVektingQueryBuilder, [include, skip]);

        public EmnevalgregelQueryBuilder ExceptVekting() => ExceptField("vekting");
    }
}
