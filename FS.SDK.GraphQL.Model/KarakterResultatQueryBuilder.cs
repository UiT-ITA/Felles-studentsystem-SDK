// <auto-generated> This file has been auto generated. </auto-generated>

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;
#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
using Newtonsoft.Json;
#endif

namespace FS.SDK.GraphQL.Model
{
    public partial class KarakterResultatQueryBuilder : GraphQlQueryBuilder<KarakterResultatQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
        {
            new() { Name = "bokstavEllerUgradert" },
            new() { Name = "navnAlleSprak", IsComplex = true, QueryBuilderType = typeof(KarakternavnAlleSprakQueryBuilder) },
            new() { Name = "tall" },
            new() { Name = "regel", IsComplex = true, QueryBuilderType = typeof(KarakterregelQueryBuilder) }
        };

        protected override string TypeName => "KarakterResultat";

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields => AllFieldMetadata;

        public KarakterResultatQueryBuilder WithBokstavEllerUgradert(string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithScalarField("bokstavEllerUgradert", alias, [include, skip]);

        public KarakterResultatQueryBuilder ExceptBokstavEllerUgradert() => ExceptField("bokstavEllerUgradert");

        public KarakterResultatQueryBuilder WithNavnAlleSprak(KarakternavnAlleSprakQueryBuilder karakternavnAlleSprakQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithObjectField("navnAlleSprak", alias, karakternavnAlleSprakQueryBuilder, [include, skip]);

        public KarakterResultatQueryBuilder ExceptNavnAlleSprak() => ExceptField("navnAlleSprak");

        public KarakterResultatQueryBuilder WithTall(string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithScalarField("tall", alias, [include, skip]);

        public KarakterResultatQueryBuilder ExceptTall() => ExceptField("tall");

        public KarakterResultatQueryBuilder WithRegel(KarakterregelQueryBuilder karakterregelQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithObjectField("regel", alias, karakterregelQueryBuilder, [include, skip]);

        public KarakterResultatQueryBuilder ExceptRegel() => ExceptField("regel");
    }
}
