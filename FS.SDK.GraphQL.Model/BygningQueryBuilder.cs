// <auto-generated> This file has been auto generated. </auto-generated>

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;
#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
using Newtonsoft.Json;
#endif

namespace FS.SDK.GraphQL.Model
{
    public partial class BygningQueryBuilder : GraphQlQueryBuilder<BygningQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
        {
            new() { Name = "id" },
            new() { Name = "kode" },
            new() { Name = "navnAlleSprak", IsComplex = true, QueryBuilderType = typeof(BygningsnavnAlleSprakQueryBuilder) },
            new() { Name = "adresse" },
            new() { Name = "campus", IsComplex = true, QueryBuilderType = typeof(CampusQueryBuilder) },
            new() { Name = "erAktiv" },
            new() { Name = "rom", IsComplex = true, QueryBuilderType = typeof(BygningRomConnectionQueryBuilder) }
        };

        protected override string TypeName => "Bygning";

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields => AllFieldMetadata;

        public BygningQueryBuilder WithId(string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithScalarField("id", alias, [include, skip]);

        public BygningQueryBuilder ExceptId() => ExceptField("id");

        public BygningQueryBuilder WithKode(string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithScalarField("kode", alias, [include, skip]);

        public BygningQueryBuilder ExceptKode() => ExceptField("kode");

        public BygningQueryBuilder WithNavnAlleSprak(BygningsnavnAlleSprakQueryBuilder bygningsnavnAlleSprakQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithObjectField("navnAlleSprak", alias, bygningsnavnAlleSprakQueryBuilder, [include, skip]);

        public BygningQueryBuilder ExceptNavnAlleSprak() => ExceptField("navnAlleSprak");

        public BygningQueryBuilder WithAdresse(string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithScalarField("adresse", alias, [include, skip]);

        public BygningQueryBuilder ExceptAdresse() => ExceptField("adresse");

        public BygningQueryBuilder WithCampus(CampusQueryBuilder campusQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithObjectField("campus", alias, campusQueryBuilder, [include, skip]);

        public BygningQueryBuilder ExceptCampus() => ExceptField("campus");

        public BygningQueryBuilder WithErAktiv(string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithScalarField("erAktiv", alias, [include, skip]);

        public BygningQueryBuilder ExceptErAktiv() => ExceptField("erAktiv");

        public BygningQueryBuilder WithRom(BygningRomConnectionQueryBuilder bygningRomConnectionQueryBuilder, QueryBuilderParameter<BygningRomFilterInput> filter = null, QueryBuilderParameter<int?> first = null, QueryBuilderParameter<string> after = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (filter != null)
                args.Add(new() { ArgumentName = "filter", ArgumentValue = filter} );

            if (first != null)
                args.Add(new() { ArgumentName = "first", ArgumentValue = first} );

            if (after != null)
                args.Add(new() { ArgumentName = "after", ArgumentValue = after} );

            return WithObjectField("rom", alias, bygningRomConnectionQueryBuilder, [include, skip], args);
        }

        public BygningQueryBuilder ExceptRom() => ExceptField("rom");
    }
}
