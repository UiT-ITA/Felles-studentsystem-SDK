// <auto-generated> This file has been auto generated. </auto-generated>

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;
#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
using Newtonsoft.Json;
#endif

namespace FS.SDK.GraphQL.Model
{
    public partial class EmneSoknadQueryBuilder : GraphQlQueryBuilder<EmneSoknadQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
        {
            new() { Name = "id" },
            new() { Name = "soknadsstatus" },
            new() { Name = "personProfil", IsComplex = true, QueryBuilderType = typeof(PersonProfilQueryBuilder) },
            new() { Name = "emne", IsComplex = true, QueryBuilderType = typeof(EmneQueryBuilder) },
            new() { Name = "termin", IsComplex = true, QueryBuilderType = typeof(TerminQueryBuilder) },
            new() { Name = "terminnummer" },
            new() { Name = "svarPaTilbud", IsComplex = true, QueryBuilderType = typeof(SvarPaTilbudQueryBuilder) },
            new() { Name = "tilbudstatus", IsComplex = true, QueryBuilderType = typeof(TilbudstatusQueryBuilder) },
            new() { Name = "mott" },
            new() { Name = "student", IsComplex = true, QueryBuilderType = typeof(StudentVedLarestedQueryBuilder) },
            new() { Name = "emneStudierett", IsComplex = true, QueryBuilderType = typeof(EmneStudierettQueryBuilder) },
            new() { Name = "opptakKanPubliseres" },
            new() { Name = "aktivitetsonsker", IsComplex = true, QueryBuilderType = typeof(EmneSoknadAktivitetsonskerConnectionQueryBuilder) }
        };

        protected override string TypeName => "EmneSoknad";

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields => AllFieldMetadata;

        public EmneSoknadQueryBuilder WithId(string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithScalarField("id", alias, [include, skip]);

        public EmneSoknadQueryBuilder ExceptId() => ExceptField("id");

        public EmneSoknadQueryBuilder WithSoknadsstatus(string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithScalarField("soknadsstatus", alias, [include, skip]);

        public EmneSoknadQueryBuilder ExceptSoknadsstatus() => ExceptField("soknadsstatus");

        public EmneSoknadQueryBuilder WithPersonProfil(PersonProfilQueryBuilder personProfilQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithObjectField("personProfil", alias, personProfilQueryBuilder, [include, skip]);

        public EmneSoknadQueryBuilder ExceptPersonProfil() => ExceptField("personProfil");

        public EmneSoknadQueryBuilder WithEmne(EmneQueryBuilder emneQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithObjectField("emne", alias, emneQueryBuilder, [include, skip]);

        public EmneSoknadQueryBuilder ExceptEmne() => ExceptField("emne");

        public EmneSoknadQueryBuilder WithTermin(TerminQueryBuilder terminQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithObjectField("termin", alias, terminQueryBuilder, [include, skip]);

        public EmneSoknadQueryBuilder ExceptTermin() => ExceptField("termin");

        public EmneSoknadQueryBuilder WithTerminnummer(string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithScalarField("terminnummer", alias, [include, skip]);

        public EmneSoknadQueryBuilder ExceptTerminnummer() => ExceptField("terminnummer");

        public EmneSoknadQueryBuilder WithSvarPaTilbud(SvarPaTilbudQueryBuilder svarPaTilbudQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithObjectField("svarPaTilbud", alias, svarPaTilbudQueryBuilder, [include, skip]);

        public EmneSoknadQueryBuilder ExceptSvarPaTilbud() => ExceptField("svarPaTilbud");

        public EmneSoknadQueryBuilder WithTilbudstatus(TilbudstatusQueryBuilder tilbudstatusQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithObjectField("tilbudstatus", alias, tilbudstatusQueryBuilder, [include, skip]);

        public EmneSoknadQueryBuilder ExceptTilbudstatus() => ExceptField("tilbudstatus");

        public EmneSoknadQueryBuilder WithMott(string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithScalarField("mott", alias, [include, skip]);

        public EmneSoknadQueryBuilder ExceptMott() => ExceptField("mott");

        public EmneSoknadQueryBuilder WithStudent(StudentVedLarestedQueryBuilder studentVedLarestedQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithObjectField("student", alias, studentVedLarestedQueryBuilder, [include, skip]);

        public EmneSoknadQueryBuilder ExceptStudent() => ExceptField("student");

        public EmneSoknadQueryBuilder WithEmneStudierett(EmneStudierettQueryBuilder emneStudierettQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithObjectField("emneStudierett", alias, emneStudierettQueryBuilder, [include, skip]);

        public EmneSoknadQueryBuilder ExceptEmneStudierett() => ExceptField("emneStudierett");

        public EmneSoknadQueryBuilder WithOpptakKanPubliseres(string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithScalarField("opptakKanPubliseres", alias, [include, skip]);

        public EmneSoknadQueryBuilder ExceptOpptakKanPubliseres() => ExceptField("opptakKanPubliseres");

        public EmneSoknadQueryBuilder WithAktivitetsonsker(EmneSoknadAktivitetsonskerConnectionQueryBuilder emneSoknadAktivitetsonskerConnectionQueryBuilder, QueryBuilderParameter<int?> first = null, QueryBuilderParameter<string> after = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (first != null)
                args.Add(new() { ArgumentName = "first", ArgumentValue = first} );

            if (after != null)
                args.Add(new() { ArgumentName = "after", ArgumentValue = after} );

            return WithObjectField("aktivitetsonsker", alias, emneSoknadAktivitetsonskerConnectionQueryBuilder, [include, skip], args);
        }

        public EmneSoknadQueryBuilder ExceptAktivitetsonsker() => ExceptField("aktivitetsonsker");
    }
}
