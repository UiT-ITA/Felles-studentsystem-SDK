// <auto-generated> This file has been auto generated. </auto-generated>

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;
#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
using Newtonsoft.Json;
#endif

namespace FS.SDK.GraphQL.Model
{
    public partial class KlasseQueryBuilder : GraphQlQueryBuilder<KlasseQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
        {
            new() { Name = "id" },
            new() { Name = "kode" },
            new() { Name = "navnAlleSprak", IsComplex = true, QueryBuilderType = typeof(KlassenavnAlleSprakQueryBuilder) },
            new() { Name = "erAktiv" },
            new() { Name = "skalEksporteresTilLms" },
            new() { Name = "lmsRomkode" },
            new() { Name = "kull", IsComplex = true, QueryBuilderType = typeof(KullQueryBuilder) },
            new() { Name = "betegnelse", IsComplex = true, QueryBuilderType = typeof(KlassebetegnelseQueryBuilder) },
            new() { Name = "campus", IsComplex = true, QueryBuilderType = typeof(CampusQueryBuilder) },
            new() { Name = "studieretning", IsComplex = true, QueryBuilderType = typeof(StudieretningQueryBuilder) },
            new() { Name = "studenterIKlasse", IsComplex = true, QueryBuilderType = typeof(KlasseStudenterIKlasseConnectionQueryBuilder) },
            new() { Name = "personroller", IsComplex = true, QueryBuilderType = typeof(KlassePersonrollerConnectionQueryBuilder) },
            new() { Name = "avgifter", IsComplex = true, QueryBuilderType = typeof(KlasseAvgifterConnectionQueryBuilder) }
        };

        protected override string TypeName => "Klasse";

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields => AllFieldMetadata;

        public KlasseQueryBuilder WithId(string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithScalarField("id", alias, [include, skip]);

        public KlasseQueryBuilder ExceptId() => ExceptField("id");

        public KlasseQueryBuilder WithKode(string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithScalarField("kode", alias, [include, skip]);

        public KlasseQueryBuilder ExceptKode() => ExceptField("kode");

        public KlasseQueryBuilder WithNavnAlleSprak(KlassenavnAlleSprakQueryBuilder klassenavnAlleSprakQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithObjectField("navnAlleSprak", alias, klassenavnAlleSprakQueryBuilder, [include, skip]);

        public KlasseQueryBuilder ExceptNavnAlleSprak() => ExceptField("navnAlleSprak");

        public KlasseQueryBuilder WithErAktiv(string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithScalarField("erAktiv", alias, [include, skip]);

        public KlasseQueryBuilder ExceptErAktiv() => ExceptField("erAktiv");

        public KlasseQueryBuilder WithSkalEksporteresTilLms(string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithScalarField("skalEksporteresTilLms", alias, [include, skip]);

        public KlasseQueryBuilder ExceptSkalEksporteresTilLms() => ExceptField("skalEksporteresTilLms");

        public KlasseQueryBuilder WithLmsRomkode(string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithScalarField("lmsRomkode", alias, [include, skip]);

        public KlasseQueryBuilder ExceptLmsRomkode() => ExceptField("lmsRomkode");

        public KlasseQueryBuilder WithKull(KullQueryBuilder kullQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithObjectField("kull", alias, kullQueryBuilder, [include, skip]);

        public KlasseQueryBuilder ExceptKull() => ExceptField("kull");

        public KlasseQueryBuilder WithBetegnelse(KlassebetegnelseQueryBuilder klassebetegnelseQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithObjectField("betegnelse", alias, klassebetegnelseQueryBuilder, [include, skip]);

        public KlasseQueryBuilder ExceptBetegnelse() => ExceptField("betegnelse");

        public KlasseQueryBuilder WithCampus(CampusQueryBuilder campusQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithObjectField("campus", alias, campusQueryBuilder, [include, skip]);

        public KlasseQueryBuilder ExceptCampus() => ExceptField("campus");

        public KlasseQueryBuilder WithStudieretning(StudieretningQueryBuilder studieretningQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithObjectField("studieretning", alias, studieretningQueryBuilder, [include, skip]);

        public KlasseQueryBuilder ExceptStudieretning() => ExceptField("studieretning");

        public KlasseQueryBuilder WithStudenterIKlasse(KlasseStudenterIKlasseConnectionQueryBuilder klasseStudenterIKlasseConnectionQueryBuilder, QueryBuilderParameter<IEnumerable<bool>> erAktiv = null, QueryBuilderParameter<int?> first = null, QueryBuilderParameter<string> after = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (erAktiv != null)
                args.Add(new() { ArgumentName = "erAktiv", ArgumentValue = erAktiv} );

            if (first != null)
                args.Add(new() { ArgumentName = "first", ArgumentValue = first} );

            if (after != null)
                args.Add(new() { ArgumentName = "after", ArgumentValue = after} );

            return WithObjectField("studenterIKlasse", alias, klasseStudenterIKlasseConnectionQueryBuilder, [include, skip], args);
        }

        public KlasseQueryBuilder ExceptStudenterIKlasse() => ExceptField("studenterIKlasse");

        public KlasseQueryBuilder WithPersonroller(KlassePersonrollerConnectionQueryBuilder klassePersonrollerConnectionQueryBuilder, QueryBuilderParameter<KlassepersonrollerFilter> filter = null, QueryBuilderParameter<int?> first = null, QueryBuilderParameter<string> after = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (filter != null)
                args.Add(new() { ArgumentName = "filter", ArgumentValue = filter} );

            if (first != null)
                args.Add(new() { ArgumentName = "first", ArgumentValue = first} );

            if (after != null)
                args.Add(new() { ArgumentName = "after", ArgumentValue = after} );

            return WithObjectField("personroller", alias, klassePersonrollerConnectionQueryBuilder, [include, skip], args);
        }

        public KlasseQueryBuilder ExceptPersonroller() => ExceptField("personroller");

        public KlasseQueryBuilder WithAvgifter(KlasseAvgifterConnectionQueryBuilder klasseAvgifterConnectionQueryBuilder, QueryBuilderParameter<int?> first = null, QueryBuilderParameter<string> after = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (first != null)
                args.Add(new() { ArgumentName = "first", ArgumentValue = first} );

            if (after != null)
                args.Add(new() { ArgumentName = "after", ArgumentValue = after} );

            return WithObjectField("avgifter", alias, klasseAvgifterConnectionQueryBuilder, [include, skip], args);
        }

        public KlasseQueryBuilder ExceptAvgifter() => ExceptField("avgifter");
    }
}
