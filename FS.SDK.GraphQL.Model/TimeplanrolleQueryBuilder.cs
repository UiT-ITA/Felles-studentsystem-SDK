// <auto-generated> This file has been auto generated. </auto-generated>

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;
#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
using Newtonsoft.Json;
#endif

namespace FS.SDK.GraphQL.Model
{
    public partial class TimeplanrolleQueryBuilder : GraphQlQueryBuilder<TimeplanrolleQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
        {
            new() { Name = "id" },
            new() { Name = "fsRolle", IsComplex = true, QueryBuilderType = typeof(FsRolleQueryBuilder) },
            new() { Name = "timeplan", IsComplex = true, QueryBuilderType = typeof(UndervisningstimeplanQueryBuilder) },
            new() { Name = "erAktiv" },
            new() { Name = "gyldighetsperiode", IsComplex = true, QueryBuilderType = typeof(TimeplanrolleGyldighetsperiodeQueryBuilder) },
            new() { Name = "personProfil", IsComplex = true, QueryBuilderType = typeof(PersonProfilQueryBuilder) },
            new() { Name = "fagperson", IsComplex = true, QueryBuilderType = typeof(FagpersonVedLarestedQueryBuilder) },
            new() { Name = "aktivStatus" }
        };

        protected override string TypeName => "Timeplanrolle";

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields => AllFieldMetadata;

        public TimeplanrolleQueryBuilder WithId(string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithScalarField("id", alias, [include, skip]);

        public TimeplanrolleQueryBuilder ExceptId() => ExceptField("id");

        public TimeplanrolleQueryBuilder WithFsRolle(FsRolleQueryBuilder fsRolleQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithObjectField("fsRolle", alias, fsRolleQueryBuilder, [include, skip]);

        public TimeplanrolleQueryBuilder ExceptFsRolle() => ExceptField("fsRolle");

        public TimeplanrolleQueryBuilder WithTimeplan(UndervisningstimeplanQueryBuilder undervisningstimeplanQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithObjectField("timeplan", alias, undervisningstimeplanQueryBuilder, [include, skip]);

        public TimeplanrolleQueryBuilder ExceptTimeplan() => ExceptField("timeplan");

        public TimeplanrolleQueryBuilder WithErAktiv(string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithScalarField("erAktiv", alias, [include, skip]);

        public TimeplanrolleQueryBuilder ExceptErAktiv() => ExceptField("erAktiv");

        public TimeplanrolleQueryBuilder WithGyldighetsperiode(TimeplanrolleGyldighetsperiodeQueryBuilder timeplanrolleGyldighetsperiodeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithObjectField("gyldighetsperiode", alias, timeplanrolleGyldighetsperiodeQueryBuilder, [include, skip]);

        public TimeplanrolleQueryBuilder ExceptGyldighetsperiode() => ExceptField("gyldighetsperiode");

        public TimeplanrolleQueryBuilder WithPersonProfil(PersonProfilQueryBuilder personProfilQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithObjectField("personProfil", alias, personProfilQueryBuilder, [include, skip]);

        public TimeplanrolleQueryBuilder ExceptPersonProfil() => ExceptField("personProfil");

        public TimeplanrolleQueryBuilder WithFagperson(FagpersonVedLarestedQueryBuilder fagpersonVedLarestedQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithObjectField("fagperson", alias, fagpersonVedLarestedQueryBuilder, [include, skip]);

        public TimeplanrolleQueryBuilder ExceptFagperson() => ExceptField("fagperson");

        public TimeplanrolleQueryBuilder WithAktivStatus(string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithScalarField("aktivStatus", alias, [include, skip]);

        public TimeplanrolleQueryBuilder ExceptAktivStatus() => ExceptField("aktivStatus");
    }
}
