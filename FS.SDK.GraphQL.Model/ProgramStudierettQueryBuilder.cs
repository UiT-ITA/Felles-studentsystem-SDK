// <auto-generated> This file has been auto generated. </auto-generated>

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;
#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
using Newtonsoft.Json;
#endif

namespace FS.SDK.GraphQL.Model
{
    public partial class ProgramStudierettQueryBuilder : GraphQlQueryBuilder<ProgramStudierettQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
        {
            new() { Name = "id" },
            new() { Name = "studieprogram", IsComplex = true, QueryBuilderType = typeof(StudieprogramQueryBuilder) },
            new() { Name = "kull", IsComplex = true, QueryBuilderType = typeof(KullQueryBuilder) },
            new() { Name = "personProfil", IsComplex = true, QueryBuilderType = typeof(PersonProfilQueryBuilder) },
            new() { Name = "studierettperiode", IsComplex = true, QueryBuilderType = typeof(StudierettperiodeQueryBuilder) },
            new() { Name = "studierettTerminperiode", IsComplex = true, QueryBuilderType = typeof(StudierettTerminperiodeQueryBuilder) },
            new() { Name = "studierettstatus", IsComplex = true, QueryBuilderType = typeof(StudierettstatusQueryBuilder) },
            new() { Name = "campus", IsComplex = true, QueryBuilderType = typeof(CampusQueryBuilder) },
            new() { Name = "erPrivatist" },
            new() { Name = "studentstatus", IsComplex = true, QueryBuilderType = typeof(StudentstatusQueryBuilder) },
            new() { Name = "merknader", IsComplex = true, QueryBuilderType = typeof(ProgramStudierettMerknadQueryBuilder) },
            new() { Name = "utdanningsplan", IsComplex = true, QueryBuilderType = typeof(UtdanningsplanQueryBuilder) },
            new() { Name = "studieretning", IsComplex = true, QueryBuilderType = typeof(StudieretningQueryBuilder) },
            new() { Name = "klassemedlemskap", IsComplex = true, QueryBuilderType = typeof(ProgramStudierettKlassemedlemskapConnectionQueryBuilder) },
            new() { Name = "begrensetTilFag", IsComplex = true, QueryBuilderType = typeof(ProgramStudierettBegrensetTilFagConnectionQueryBuilder) },
            new() { Name = "begrensetTilEmner", IsComplex = true, QueryBuilderType = typeof(ProgramStudierettBegrensetTilEmnerConnectionQueryBuilder) },
            new() { Name = "student", IsComplex = true, QueryBuilderType = typeof(StudentVedLarestedQueryBuilder) },
            new() { Name = "studierettsbegrensning", IsComplex = true, QueryBuilderType = typeof(StudierettsbegrensningnavnQueryBuilder) },
            new() { Name = "permisjoner", IsComplex = true, QueryBuilderType = typeof(PermisjonQueryBuilder) },
            new() { Name = "phd", IsComplex = true, QueryBuilderType = typeof(ProgramStudierettPhdDataQueryBuilder) }
        };

        protected override string TypeName => "ProgramStudierett";

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields => AllFieldMetadata;

        public ProgramStudierettQueryBuilder WithId(string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithScalarField("id", alias, [include, skip]);

        public ProgramStudierettQueryBuilder ExceptId() => ExceptField("id");

        public ProgramStudierettQueryBuilder WithStudieprogram(StudieprogramQueryBuilder studieprogramQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithObjectField("studieprogram", alias, studieprogramQueryBuilder, [include, skip]);

        public ProgramStudierettQueryBuilder ExceptStudieprogram() => ExceptField("studieprogram");

        public ProgramStudierettQueryBuilder WithKull(KullQueryBuilder kullQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithObjectField("kull", alias, kullQueryBuilder, [include, skip]);

        public ProgramStudierettQueryBuilder ExceptKull() => ExceptField("kull");

        public ProgramStudierettQueryBuilder WithPersonProfil(PersonProfilQueryBuilder personProfilQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithObjectField("personProfil", alias, personProfilQueryBuilder, [include, skip]);

        public ProgramStudierettQueryBuilder ExceptPersonProfil() => ExceptField("personProfil");

        public ProgramStudierettQueryBuilder WithStudierettperiode(StudierettperiodeQueryBuilder studierettperiodeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithObjectField("studierettperiode", alias, studierettperiodeQueryBuilder, [include, skip]);

        public ProgramStudierettQueryBuilder ExceptStudierettperiode() => ExceptField("studierettperiode");

        public ProgramStudierettQueryBuilder WithStudierettTerminperiode(StudierettTerminperiodeQueryBuilder studierettTerminperiodeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithObjectField("studierettTerminperiode", alias, studierettTerminperiodeQueryBuilder, [include, skip]);

        public ProgramStudierettQueryBuilder ExceptStudierettTerminperiode() => ExceptField("studierettTerminperiode");

        public ProgramStudierettQueryBuilder WithStudierettstatus(StudierettstatusQueryBuilder studierettstatusQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithObjectField("studierettstatus", alias, studierettstatusQueryBuilder, [include, skip]);

        public ProgramStudierettQueryBuilder ExceptStudierettstatus() => ExceptField("studierettstatus");

        public ProgramStudierettQueryBuilder WithCampus(CampusQueryBuilder campusQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithObjectField("campus", alias, campusQueryBuilder, [include, skip]);

        public ProgramStudierettQueryBuilder ExceptCampus() => ExceptField("campus");

        public ProgramStudierettQueryBuilder WithErPrivatist(string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithScalarField("erPrivatist", alias, [include, skip]);

        public ProgramStudierettQueryBuilder ExceptErPrivatist() => ExceptField("erPrivatist");

        public ProgramStudierettQueryBuilder WithStudentstatus(StudentstatusQueryBuilder studentstatusQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithObjectField("studentstatus", alias, studentstatusQueryBuilder, [include, skip]);

        public ProgramStudierettQueryBuilder ExceptStudentstatus() => ExceptField("studentstatus");

        public ProgramStudierettQueryBuilder WithMerknader(ProgramStudierettMerknadQueryBuilder programStudierettMerknadQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithObjectField("merknader", alias, programStudierettMerknadQueryBuilder, [include, skip]);

        public ProgramStudierettQueryBuilder ExceptMerknader() => ExceptField("merknader");

        public ProgramStudierettQueryBuilder WithUtdanningsplan(UtdanningsplanQueryBuilder utdanningsplanQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithObjectField("utdanningsplan", alias, utdanningsplanQueryBuilder, [include, skip]);

        public ProgramStudierettQueryBuilder ExceptUtdanningsplan() => ExceptField("utdanningsplan");

        public ProgramStudierettQueryBuilder WithStudieretning(StudieretningQueryBuilder studieretningQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithObjectField("studieretning", alias, studieretningQueryBuilder, [include, skip]);

        public ProgramStudierettQueryBuilder ExceptStudieretning() => ExceptField("studieretning");

        public ProgramStudierettQueryBuilder WithKlassemedlemskap(ProgramStudierettKlassemedlemskapConnectionQueryBuilder programStudierettKlassemedlemskapConnectionQueryBuilder, QueryBuilderParameter<StudentVedLarestedKlassemedlemskapFilterInput> filter = null, QueryBuilderParameter<int?> first = null, QueryBuilderParameter<string> after = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (filter != null)
                args.Add(new() { ArgumentName = "filter", ArgumentValue = filter} );

            if (first != null)
                args.Add(new() { ArgumentName = "first", ArgumentValue = first} );

            if (after != null)
                args.Add(new() { ArgumentName = "after", ArgumentValue = after} );

            return WithObjectField("klassemedlemskap", alias, programStudierettKlassemedlemskapConnectionQueryBuilder, [include, skip], args);
        }

        public ProgramStudierettQueryBuilder ExceptKlassemedlemskap() => ExceptField("klassemedlemskap");

        public ProgramStudierettQueryBuilder WithBegrensetTilFag(ProgramStudierettBegrensetTilFagConnectionQueryBuilder programStudierettBegrensetTilFagConnectionQueryBuilder, QueryBuilderParameter<int?> first = null, QueryBuilderParameter<string> after = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (first != null)
                args.Add(new() { ArgumentName = "first", ArgumentValue = first} );

            if (after != null)
                args.Add(new() { ArgumentName = "after", ArgumentValue = after} );

            return WithObjectField("begrensetTilFag", alias, programStudierettBegrensetTilFagConnectionQueryBuilder, [include, skip], args);
        }

        public ProgramStudierettQueryBuilder ExceptBegrensetTilFag() => ExceptField("begrensetTilFag");

        public ProgramStudierettQueryBuilder WithBegrensetTilEmner(ProgramStudierettBegrensetTilEmnerConnectionQueryBuilder programStudierettBegrensetTilEmnerConnectionQueryBuilder, QueryBuilderParameter<int?> first = null, QueryBuilderParameter<string> after = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (first != null)
                args.Add(new() { ArgumentName = "first", ArgumentValue = first} );

            if (after != null)
                args.Add(new() { ArgumentName = "after", ArgumentValue = after} );

            return WithObjectField("begrensetTilEmner", alias, programStudierettBegrensetTilEmnerConnectionQueryBuilder, [include, skip], args);
        }

        public ProgramStudierettQueryBuilder ExceptBegrensetTilEmner() => ExceptField("begrensetTilEmner");

        public ProgramStudierettQueryBuilder WithStudent(StudentVedLarestedQueryBuilder studentVedLarestedQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithObjectField("student", alias, studentVedLarestedQueryBuilder, [include, skip]);

        public ProgramStudierettQueryBuilder ExceptStudent() => ExceptField("student");

        public ProgramStudierettQueryBuilder WithStudierettsbegrensning(StudierettsbegrensningnavnQueryBuilder studierettsbegrensningnavnQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithObjectField("studierettsbegrensning", alias, studierettsbegrensningnavnQueryBuilder, [include, skip]);

        public ProgramStudierettQueryBuilder ExceptStudierettsbegrensning() => ExceptField("studierettsbegrensning");

        public ProgramStudierettQueryBuilder WithPermisjoner(PermisjonQueryBuilder permisjonQueryBuilder, QueryBuilderParameter<ProgramstudierettPermisjonFilterInput> filter = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (filter != null)
                args.Add(new() { ArgumentName = "filter", ArgumentValue = filter} );

            return WithObjectField("permisjoner", alias, permisjonQueryBuilder, [include, skip], args);
        }

        public ProgramStudierettQueryBuilder ExceptPermisjoner() => ExceptField("permisjoner");

        public ProgramStudierettQueryBuilder WithPhd(ProgramStudierettPhdDataQueryBuilder programStudierettPhdDataQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithObjectField("phd", alias, programStudierettPhdDataQueryBuilder, [include, skip]);

        public ProgramStudierettQueryBuilder ExceptPhd() => ExceptField("phd");
    }
}
