// <auto-generated> This file has been auto generated. </auto-generated>

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;
#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
using Newtonsoft.Json;
#endif

namespace FS.SDK.GraphQL.Model
{
    public partial class PersonProfilQueryBuilder : GraphQlQueryBuilder<PersonProfilQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
        {
            new() { Name = "id" },
            new() { Name = "personlopenummer" },
            new() { Name = "fodselsnummer" },
            new() { Name = "erDod" },
            new() { Name = "navn", IsComplex = true, QueryBuilderType = typeof(PersonnavnQueryBuilder) },
            new() { Name = "fodselsdato" },
            new() { Name = "feideBruker" },
            new() { Name = "maalform" },
            new() { Name = "mobilTelefon", IsComplex = true, QueryBuilderType = typeof(TelefonQueryBuilder) },
            new() { Name = "privatTelefon", IsComplex = true, QueryBuilderType = typeof(TelefonQueryBuilder) },
            new() { Name = "privatEpost" },
            new() { Name = "arbeidsEpost" },
            new() { Name = "institusjonsEpost" },
            new() { Name = "folkeregistrertAdresse", IsComplex = true, QueryBuilderType = typeof(FolkeregistrertAdresseQueryBuilder) },
            new() { Name = "postadresse", IsComplex = true, QueryBuilderType = typeof(PostadresseQueryBuilder) },
            new() { Name = "fsSoknader", IsComplex = true, QueryBuilderType = typeof(PersonProfilFsSoknaderConnectionQueryBuilder) },
            new() { Name = "student", IsComplex = true, QueryBuilderType = typeof(StudentVedLarestedQueryBuilder) },
            new() { Name = "programStudieretter", IsComplex = true, QueryBuilderType = typeof(PersonProfilProgramStudieretterConnectionQueryBuilder) },
            new() { Name = "kanOverforesTilLms" },
            new() { Name = "statsborgerskap", IsComplex = true, QueryBuilderType = typeof(StatsborgerskapQueryBuilder) },
            new() { Name = "deltaker", IsComplex = true, QueryBuilderType = typeof(DeltakerVedLarestedQueryBuilder) },
            new() { Name = "fagperson", IsComplex = true, QueryBuilderType = typeof(FagpersonVedLarestedQueryBuilder) },
            new() { Name = "larested", IsComplex = true, QueryBuilderType = typeof(OrganisasjonQueryBuilder) },
            new() { Name = "pass", IsComplex = true, QueryBuilderType = typeof(PassQueryBuilder) },
            new() { Name = "fodselsnummertype" },
            new() { Name = "fodselsnummerhistorikk", IsComplex = true, QueryBuilderType = typeof(FodselsnummerendringQueryBuilder) },
            new() { Name = "arbeidsTelefon", IsComplex = true, QueryBuilderType = typeof(TelefonQueryBuilder) },
            new() { Name = "kjonn" },
            new() { Name = "morsmaal", IsComplex = true, QueryBuilderType = typeof(SprakQueryBuilder) },
            new() { Name = "tidligerePersonNavn", IsComplex = true, QueryBuilderType = typeof(TidligerePersonNavnQueryBuilder) },
            new() { Name = "bankkontonummer" },
            new() { Name = "kriseKontaktperson", IsComplex = true, QueryBuilderType = typeof(KriseKontaktpersonQueryBuilder) },
            new() { Name = "ansattnummer" },
            new() { Name = "personDataKanHentesFraFolkeregisteret" },
            new() { Name = "undervisningsenhetsroller", IsComplex = true, QueryBuilderType = typeof(UndervisningsenhetsrolleQueryBuilder) },
            new() { Name = "pinkode" }
        };

        protected override string TypeName => "PersonProfil";

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields => AllFieldMetadata;

        public PersonProfilQueryBuilder WithId(string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithScalarField("id", alias, [include, skip]);

        public PersonProfilQueryBuilder ExceptId() => ExceptField("id");

        public PersonProfilQueryBuilder WithPersonlopenummer(string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithScalarField("personlopenummer", alias, [include, skip]);

        public PersonProfilQueryBuilder ExceptPersonlopenummer() => ExceptField("personlopenummer");

        public PersonProfilQueryBuilder WithFodselsnummer(string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithScalarField("fodselsnummer", alias, [include, skip]);

        public PersonProfilQueryBuilder ExceptFodselsnummer() => ExceptField("fodselsnummer");

        public PersonProfilQueryBuilder WithErDod(string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithScalarField("erDod", alias, [include, skip]);

        public PersonProfilQueryBuilder ExceptErDod() => ExceptField("erDod");

        public PersonProfilQueryBuilder WithNavn(PersonnavnQueryBuilder personnavnQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithObjectField("navn", alias, personnavnQueryBuilder, [include, skip]);

        public PersonProfilQueryBuilder ExceptNavn() => ExceptField("navn");

        public PersonProfilQueryBuilder WithFodselsdato(string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithScalarField("fodselsdato", alias, [include, skip]);

        public PersonProfilQueryBuilder ExceptFodselsdato() => ExceptField("fodselsdato");

        public PersonProfilQueryBuilder WithFeideBruker(string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithScalarField("feideBruker", alias, [include, skip]);

        public PersonProfilQueryBuilder ExceptFeideBruker() => ExceptField("feideBruker");

        public PersonProfilQueryBuilder WithMaalform(string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithScalarField("maalform", alias, [include, skip]);

        public PersonProfilQueryBuilder ExceptMaalform() => ExceptField("maalform");

        public PersonProfilQueryBuilder WithMobilTelefon(TelefonQueryBuilder telefonQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithObjectField("mobilTelefon", alias, telefonQueryBuilder, [include, skip]);

        public PersonProfilQueryBuilder ExceptMobilTelefon() => ExceptField("mobilTelefon");

        public PersonProfilQueryBuilder WithPrivatTelefon(TelefonQueryBuilder telefonQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithObjectField("privatTelefon", alias, telefonQueryBuilder, [include, skip]);

        public PersonProfilQueryBuilder ExceptPrivatTelefon() => ExceptField("privatTelefon");

        public PersonProfilQueryBuilder WithPrivatEpost(string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithScalarField("privatEpost", alias, [include, skip]);

        public PersonProfilQueryBuilder ExceptPrivatEpost() => ExceptField("privatEpost");

        public PersonProfilQueryBuilder WithArbeidsEpost(string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithScalarField("arbeidsEpost", alias, [include, skip]);

        public PersonProfilQueryBuilder ExceptArbeidsEpost() => ExceptField("arbeidsEpost");

        public PersonProfilQueryBuilder WithInstitusjonsEpost(string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithScalarField("institusjonsEpost", alias, [include, skip]);

        public PersonProfilQueryBuilder ExceptInstitusjonsEpost() => ExceptField("institusjonsEpost");

        public PersonProfilQueryBuilder WithFolkeregistrertAdresse(FolkeregistrertAdresseQueryBuilder folkeregistrertAdresseQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithObjectField("folkeregistrertAdresse", alias, folkeregistrertAdresseQueryBuilder, [include, skip]);

        public PersonProfilQueryBuilder ExceptFolkeregistrertAdresse() => ExceptField("folkeregistrertAdresse");

        public PersonProfilQueryBuilder WithPostadresse(PostadresseQueryBuilder postadresseQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithObjectField("postadresse", alias, postadresseQueryBuilder, [include, skip]);

        public PersonProfilQueryBuilder ExceptPostadresse() => ExceptField("postadresse");

        public PersonProfilQueryBuilder WithFsSoknader(PersonProfilFsSoknaderConnectionQueryBuilder personProfilFsSoknaderConnectionQueryBuilder, QueryBuilderParameter<PersonProfilFsSoknaderFilterInput> filter = null, QueryBuilderParameter<int?> first = null, QueryBuilderParameter<string> after = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (filter != null)
                args.Add(new() { ArgumentName = "filter", ArgumentValue = filter} );

            if (first != null)
                args.Add(new() { ArgumentName = "first", ArgumentValue = first} );

            if (after != null)
                args.Add(new() { ArgumentName = "after", ArgumentValue = after} );

            return WithObjectField("fsSoknader", alias, personProfilFsSoknaderConnectionQueryBuilder, [include, skip], args);
        }

        public PersonProfilQueryBuilder ExceptFsSoknader() => ExceptField("fsSoknader");

        public PersonProfilQueryBuilder WithStudent(StudentVedLarestedQueryBuilder studentVedLarestedQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithObjectField("student", alias, studentVedLarestedQueryBuilder, [include, skip]);

        public PersonProfilQueryBuilder ExceptStudent() => ExceptField("student");

        public PersonProfilQueryBuilder WithProgramStudieretter(PersonProfilProgramStudieretterConnectionQueryBuilder personProfilProgramStudieretterConnectionQueryBuilder, QueryBuilderParameter<PersonProfilProgramStudieretterFilterInput> filter = null, QueryBuilderParameter<PersonProfilProgramStudieretterOrderByInput> orderBy = null, QueryBuilderParameter<int?> first = null, QueryBuilderParameter<string> after = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (filter != null)
                args.Add(new() { ArgumentName = "filter", ArgumentValue = filter} );

            if (orderBy != null)
                args.Add(new() { ArgumentName = "orderBy", ArgumentValue = orderBy} );

            if (first != null)
                args.Add(new() { ArgumentName = "first", ArgumentValue = first} );

            if (after != null)
                args.Add(new() { ArgumentName = "after", ArgumentValue = after} );

            return WithObjectField("programStudieretter", alias, personProfilProgramStudieretterConnectionQueryBuilder, [include, skip], args);
        }

        public PersonProfilQueryBuilder ExceptProgramStudieretter() => ExceptField("programStudieretter");

        public PersonProfilQueryBuilder WithKanOverforesTilLms(string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithScalarField("kanOverforesTilLms", alias, [include, skip]);

        public PersonProfilQueryBuilder ExceptKanOverforesTilLms() => ExceptField("kanOverforesTilLms");

        public PersonProfilQueryBuilder WithStatsborgerskap(StatsborgerskapQueryBuilder statsborgerskapQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithObjectField("statsborgerskap", alias, statsborgerskapQueryBuilder, [include, skip]);

        public PersonProfilQueryBuilder ExceptStatsborgerskap() => ExceptField("statsborgerskap");

        public PersonProfilQueryBuilder WithDeltaker(DeltakerVedLarestedQueryBuilder deltakerVedLarestedQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithObjectField("deltaker", alias, deltakerVedLarestedQueryBuilder, [include, skip]);

        public PersonProfilQueryBuilder ExceptDeltaker() => ExceptField("deltaker");

        public PersonProfilQueryBuilder WithFagperson(FagpersonVedLarestedQueryBuilder fagpersonVedLarestedQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithObjectField("fagperson", alias, fagpersonVedLarestedQueryBuilder, [include, skip]);

        public PersonProfilQueryBuilder ExceptFagperson() => ExceptField("fagperson");

        public PersonProfilQueryBuilder WithLarested(OrganisasjonQueryBuilder organisasjonQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithObjectField("larested", alias, organisasjonQueryBuilder, [include, skip]);

        public PersonProfilQueryBuilder ExceptLarested() => ExceptField("larested");

        public PersonProfilQueryBuilder WithPass(PassQueryBuilder passQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithObjectField("pass", alias, passQueryBuilder, [include, skip]);

        public PersonProfilQueryBuilder ExceptPass() => ExceptField("pass");

        public PersonProfilQueryBuilder WithFodselsnummertype(string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithScalarField("fodselsnummertype", alias, [include, skip]);

        public PersonProfilQueryBuilder ExceptFodselsnummertype() => ExceptField("fodselsnummertype");

        public PersonProfilQueryBuilder WithFodselsnummerhistorikk(FodselsnummerendringQueryBuilder fodselsnummerendringQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithObjectField("fodselsnummerhistorikk", alias, fodselsnummerendringQueryBuilder, [include, skip]);

        public PersonProfilQueryBuilder ExceptFodselsnummerhistorikk() => ExceptField("fodselsnummerhistorikk");

        public PersonProfilQueryBuilder WithArbeidsTelefon(TelefonQueryBuilder telefonQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithObjectField("arbeidsTelefon", alias, telefonQueryBuilder, [include, skip]);

        public PersonProfilQueryBuilder ExceptArbeidsTelefon() => ExceptField("arbeidsTelefon");

        public PersonProfilQueryBuilder WithKjonn(string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithScalarField("kjonn", alias, [include, skip]);

        public PersonProfilQueryBuilder ExceptKjonn() => ExceptField("kjonn");

        public PersonProfilQueryBuilder WithMorsmaal(SprakQueryBuilder sprakQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithObjectField("morsmaal", alias, sprakQueryBuilder, [include, skip]);

        public PersonProfilQueryBuilder ExceptMorsmaal() => ExceptField("morsmaal");

        public PersonProfilQueryBuilder WithTidligerePersonNavn(TidligerePersonNavnQueryBuilder tidligerePersonNavnQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithObjectField("tidligerePersonNavn", alias, tidligerePersonNavnQueryBuilder, [include, skip]);

        public PersonProfilQueryBuilder ExceptTidligerePersonNavn() => ExceptField("tidligerePersonNavn");

        public PersonProfilQueryBuilder WithBankkontonummer(string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithScalarField("bankkontonummer", alias, [include, skip]);

        public PersonProfilQueryBuilder ExceptBankkontonummer() => ExceptField("bankkontonummer");

        public PersonProfilQueryBuilder WithKriseKontaktperson(KriseKontaktpersonQueryBuilder kriseKontaktpersonQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithObjectField("kriseKontaktperson", alias, kriseKontaktpersonQueryBuilder, [include, skip]);

        public PersonProfilQueryBuilder ExceptKriseKontaktperson() => ExceptField("kriseKontaktperson");

        public PersonProfilQueryBuilder WithAnsattnummer(string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithScalarField("ansattnummer", alias, [include, skip]);

        public PersonProfilQueryBuilder ExceptAnsattnummer() => ExceptField("ansattnummer");

        public PersonProfilQueryBuilder WithPersonDataKanHentesFraFolkeregisteret(string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithScalarField("personDataKanHentesFraFolkeregisteret", alias, [include, skip]);

        public PersonProfilQueryBuilder ExceptPersonDataKanHentesFraFolkeregisteret() => ExceptField("personDataKanHentesFraFolkeregisteret");

        public PersonProfilQueryBuilder WithUndervisningsenhetsroller(UndervisningsenhetsrolleQueryBuilder undervisningsenhetsrolleQueryBuilder, QueryBuilderParameter<PersonProfilUndervisningsenhetsrollerFilterInput> filter = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (filter != null)
                args.Add(new() { ArgumentName = "filter", ArgumentValue = filter} );

            return WithObjectField("undervisningsenhetsroller", alias, undervisningsenhetsrolleQueryBuilder, [include, skip], args);
        }

        public PersonProfilQueryBuilder ExceptUndervisningsenhetsroller() => ExceptField("undervisningsenhetsroller");

        public PersonProfilQueryBuilder WithPinkode(string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithScalarField("pinkode", alias, [include, skip]);

        public PersonProfilQueryBuilder ExceptPinkode() => ExceptField("pinkode");
    }
}
