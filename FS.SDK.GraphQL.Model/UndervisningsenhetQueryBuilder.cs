// <auto-generated> This file has been auto generated. </auto-generated>

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;
#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
using Newtonsoft.Json;
#endif

namespace FS.SDK.GraphQL.Model
{
    public partial class UndervisningsenhetQueryBuilder : GraphQlQueryBuilder<UndervisningsenhetQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
        {
            new() { Name = "id" },
            new() { Name = "termin", IsComplex = true, QueryBuilderType = typeof(TerminQueryBuilder) },
            new() { Name = "terminnummer" },
            new() { Name = "emne", IsComplex = true, QueryBuilderType = typeof(EmneQueryBuilder) },
            new() { Name = "undervisningsaktiviteter", IsComplex = true, QueryBuilderType = typeof(UndervisningsenhetUndervisningsaktiviteterConnectionQueryBuilder) },
            new() { Name = "skalEksporteresTilLms" },
            new() { Name = "lmsRomkode" },
            new() { Name = "undervisningenFolger", IsComplex = true, QueryBuilderType = typeof(EmneQueryBuilder) },
            new() { Name = "undervisningenFolgesAv", IsComplex = true, QueryBuilderType = typeof(UndervisningsenhetUndervisningenFolgesAvConnectionQueryBuilder) },
            new() { Name = "sprakvalg", IsComplex = true, QueryBuilderType = typeof(UndervisningsenhetSprakvalgQueryBuilder) },
            new() { Name = "startForEnkeltemneopptak" },
            new() { Name = "campuser", IsComplex = true, QueryBuilderType = typeof(CampusQueryBuilder) },
            new() { Name = "studieretter", IsComplex = true, QueryBuilderType = typeof(UndervisningsenhetStudieretterConnectionQueryBuilder) },
            new() { Name = "soknader", IsComplex = true, QueryBuilderType = typeof(UndervisningsenhetSoknaderConnectionQueryBuilder) },
            new() { Name = "personroller", IsComplex = true, QueryBuilderType = typeof(UndervisningsenhetPersonrollerConnectionQueryBuilder) },
            new() { Name = "oppmeldingsperiode", IsComplex = true, QueryBuilderType = typeof(UndervisningsOppmeldingsperiodeQueryBuilder) },
            new() { Name = "erLukket" },
            new() { Name = "skalEksporteresTilTimeplansystem" },
            new() { Name = "studentKanVelgeCampus" },
            new() { Name = "opptaksgrupper", IsComplex = true, QueryBuilderType = typeof(OpptaksgruppeForUndervisningsenhetQueryBuilder) },
            new() { Name = "oppmote", IsComplex = true, QueryBuilderType = typeof(OppmoteTilUndervisningQueryBuilder) }
        };

        protected override string TypeName => "Undervisningsenhet";

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields => AllFieldMetadata;

        public UndervisningsenhetQueryBuilder WithId(string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithScalarField("id", alias, [include, skip]);

        public UndervisningsenhetQueryBuilder ExceptId() => ExceptField("id");

        public UndervisningsenhetQueryBuilder WithTermin(TerminQueryBuilder terminQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithObjectField("termin", alias, terminQueryBuilder, [include, skip]);

        public UndervisningsenhetQueryBuilder ExceptTermin() => ExceptField("termin");

        public UndervisningsenhetQueryBuilder WithTerminnummer(string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithScalarField("terminnummer", alias, [include, skip]);

        public UndervisningsenhetQueryBuilder ExceptTerminnummer() => ExceptField("terminnummer");

        public UndervisningsenhetQueryBuilder WithEmne(EmneQueryBuilder emneQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithObjectField("emne", alias, emneQueryBuilder, [include, skip]);

        public UndervisningsenhetQueryBuilder ExceptEmne() => ExceptField("emne");

        public UndervisningsenhetQueryBuilder WithUndervisningsaktiviteter(UndervisningsenhetUndervisningsaktiviteterConnectionQueryBuilder undervisningsenhetUndervisningsaktiviteterConnectionQueryBuilder, QueryBuilderParameter<UndervisningsenhetUndervisningsaktiviteterFilterInput> filter = null, QueryBuilderParameter<int?> first = null, QueryBuilderParameter<string> after = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (filter != null)
                args.Add(new() { ArgumentName = "filter", ArgumentValue = filter} );

            if (first != null)
                args.Add(new() { ArgumentName = "first", ArgumentValue = first} );

            if (after != null)
                args.Add(new() { ArgumentName = "after", ArgumentValue = after} );

            return WithObjectField("undervisningsaktiviteter", alias, undervisningsenhetUndervisningsaktiviteterConnectionQueryBuilder, [include, skip], args);
        }

        public UndervisningsenhetQueryBuilder ExceptUndervisningsaktiviteter() => ExceptField("undervisningsaktiviteter");

        public UndervisningsenhetQueryBuilder WithSkalEksporteresTilLms(string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithScalarField("skalEksporteresTilLms", alias, [include, skip]);

        public UndervisningsenhetQueryBuilder ExceptSkalEksporteresTilLms() => ExceptField("skalEksporteresTilLms");

        public UndervisningsenhetQueryBuilder WithLmsRomkode(string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithScalarField("lmsRomkode", alias, [include, skip]);

        public UndervisningsenhetQueryBuilder ExceptLmsRomkode() => ExceptField("lmsRomkode");

        public UndervisningsenhetQueryBuilder WithUndervisningenFolger(EmneQueryBuilder emneQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithObjectField("undervisningenFolger", alias, emneQueryBuilder, [include, skip]);

        public UndervisningsenhetQueryBuilder ExceptUndervisningenFolger() => ExceptField("undervisningenFolger");

        public UndervisningsenhetQueryBuilder WithUndervisningenFolgesAv(UndervisningsenhetUndervisningenFolgesAvConnectionQueryBuilder undervisningsenhetUndervisningenFolgesAvConnectionQueryBuilder, QueryBuilderParameter<int?> first = null, QueryBuilderParameter<string> after = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (first != null)
                args.Add(new() { ArgumentName = "first", ArgumentValue = first} );

            if (after != null)
                args.Add(new() { ArgumentName = "after", ArgumentValue = after} );

            return WithObjectField("undervisningenFolgesAv", alias, undervisningsenhetUndervisningenFolgesAvConnectionQueryBuilder, [include, skip], args);
        }

        public UndervisningsenhetQueryBuilder ExceptUndervisningenFolgesAv() => ExceptField("undervisningenFolgesAv");

        public UndervisningsenhetQueryBuilder WithSprakvalg(UndervisningsenhetSprakvalgQueryBuilder undervisningsenhetSprakvalgQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithObjectField("sprakvalg", alias, undervisningsenhetSprakvalgQueryBuilder, [include, skip]);

        public UndervisningsenhetQueryBuilder ExceptSprakvalg() => ExceptField("sprakvalg");

        public UndervisningsenhetQueryBuilder WithStartForEnkeltemneopptak(string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithScalarField("startForEnkeltemneopptak", alias, [include, skip]);

        public UndervisningsenhetQueryBuilder ExceptStartForEnkeltemneopptak() => ExceptField("startForEnkeltemneopptak");

        public UndervisningsenhetQueryBuilder WithCampuser(CampusQueryBuilder campusQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithObjectField("campuser", alias, campusQueryBuilder, [include, skip]);

        public UndervisningsenhetQueryBuilder ExceptCampuser() => ExceptField("campuser");

        public UndervisningsenhetQueryBuilder WithStudieretter(UndervisningsenhetStudieretterConnectionQueryBuilder undervisningsenhetStudieretterConnectionQueryBuilder, QueryBuilderParameter<UndervisningsenhetStudieretterFilterInput> filter = null, QueryBuilderParameter<int?> first = null, QueryBuilderParameter<string> after = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (filter != null)
                args.Add(new() { ArgumentName = "filter", ArgumentValue = filter} );

            if (first != null)
                args.Add(new() { ArgumentName = "first", ArgumentValue = first} );

            if (after != null)
                args.Add(new() { ArgumentName = "after", ArgumentValue = after} );

            return WithObjectField("studieretter", alias, undervisningsenhetStudieretterConnectionQueryBuilder, [include, skip], args);
        }

        public UndervisningsenhetQueryBuilder ExceptStudieretter() => ExceptField("studieretter");

        public UndervisningsenhetQueryBuilder WithSoknader(UndervisningsenhetSoknaderConnectionQueryBuilder undervisningsenhetSoknaderConnectionQueryBuilder, QueryBuilderParameter<UndervisningsenhetSoknaderFilterInput> filter = null, QueryBuilderParameter<int?> first = null, QueryBuilderParameter<string> after = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (filter != null)
                args.Add(new() { ArgumentName = "filter", ArgumentValue = filter} );

            if (first != null)
                args.Add(new() { ArgumentName = "first", ArgumentValue = first} );

            if (after != null)
                args.Add(new() { ArgumentName = "after", ArgumentValue = after} );

            return WithObjectField("soknader", alias, undervisningsenhetSoknaderConnectionQueryBuilder, [include, skip], args);
        }

        public UndervisningsenhetQueryBuilder ExceptSoknader() => ExceptField("soknader");

        public UndervisningsenhetQueryBuilder WithPersonroller(UndervisningsenhetPersonrollerConnectionQueryBuilder undervisningsenhetPersonrollerConnectionQueryBuilder, QueryBuilderParameter<UndervisningsenhetPersonrollerFilterInput> filter = null, QueryBuilderParameter<int?> first = null, QueryBuilderParameter<string> after = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (filter != null)
                args.Add(new() { ArgumentName = "filter", ArgumentValue = filter} );

            if (first != null)
                args.Add(new() { ArgumentName = "first", ArgumentValue = first} );

            if (after != null)
                args.Add(new() { ArgumentName = "after", ArgumentValue = after} );

            return WithObjectField("personroller", alias, undervisningsenhetPersonrollerConnectionQueryBuilder, [include, skip], args);
        }

        public UndervisningsenhetQueryBuilder ExceptPersonroller() => ExceptField("personroller");

        public UndervisningsenhetQueryBuilder WithOppmeldingsperiode(UndervisningsOppmeldingsperiodeQueryBuilder undervisningsOppmeldingsperiodeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithObjectField("oppmeldingsperiode", alias, undervisningsOppmeldingsperiodeQueryBuilder, [include, skip]);

        public UndervisningsenhetQueryBuilder ExceptOppmeldingsperiode() => ExceptField("oppmeldingsperiode");

        public UndervisningsenhetQueryBuilder WithErLukket(string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithScalarField("erLukket", alias, [include, skip]);

        public UndervisningsenhetQueryBuilder ExceptErLukket() => ExceptField("erLukket");

        public UndervisningsenhetQueryBuilder WithSkalEksporteresTilTimeplansystem(string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithScalarField("skalEksporteresTilTimeplansystem", alias, [include, skip]);

        public UndervisningsenhetQueryBuilder ExceptSkalEksporteresTilTimeplansystem() => ExceptField("skalEksporteresTilTimeplansystem");

        public UndervisningsenhetQueryBuilder WithStudentKanVelgeCampus(string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithScalarField("studentKanVelgeCampus", alias, [include, skip]);

        public UndervisningsenhetQueryBuilder ExceptStudentKanVelgeCampus() => ExceptField("studentKanVelgeCampus");

        public UndervisningsenhetQueryBuilder WithOpptaksgrupper(OpptaksgruppeForUndervisningsenhetQueryBuilder opptaksgruppeForUndervisningsenhetQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithObjectField("opptaksgrupper", alias, opptaksgruppeForUndervisningsenhetQueryBuilder, [include, skip]);

        public UndervisningsenhetQueryBuilder ExceptOpptaksgrupper() => ExceptField("opptaksgrupper");

        public UndervisningsenhetQueryBuilder WithOppmote(OppmoteTilUndervisningQueryBuilder oppmoteTilUndervisningQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithObjectField("oppmote", alias, oppmoteTilUndervisningQueryBuilder, [include, skip]);

        public UndervisningsenhetQueryBuilder ExceptOppmote() => ExceptField("oppmote");
    }
}
