// <auto-generated> This file has been auto generated. </auto-generated>

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;
#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
using Newtonsoft.Json;
#endif

namespace FS.SDK.GraphQL.Model
{
    public partial class OrganisasjonsenhetQueryBuilder : GraphQlQueryBuilder<OrganisasjonsenhetQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
        {
            new() { Name = "id" },
            new() { Name = "navnAlleSprak", IsComplex = true, QueryBuilderType = typeof(OrganisasjonsenhetnavnAlleSprakQueryBuilder) },
            new() { Name = "organisasjon", IsComplex = true, QueryBuilderType = typeof(OrganisasjonQueryBuilder) },
            new() { Name = "fakultet", IsComplex = true, QueryBuilderType = typeof(FakultetQueryBuilder) },
            new() { Name = "bibliotek", IsComplex = true, QueryBuilderType = typeof(BibliotekQueryBuilder) },
            new() { Name = "instituttnummer" },
            new() { Name = "erAktiv" },
            new() { Name = "skalEksporteresTilLms" },
            new() { Name = "lmsRomkode" },
            new() { Name = "gruppenummer" },
            new() { Name = "personroller", IsComplex = true, QueryBuilderType = typeof(OrganisasjonsenhetPersonrollerConnectionQueryBuilder) },
            new() { Name = "utvekslingsavtaler", IsComplex = true, QueryBuilderType = typeof(OrganisasjonsenhetUtvekslingsavtalerConnectionQueryBuilder) },
            new() { Name = "institutt", IsComplex = true, QueryBuilderType = typeof(OrganisasjonsenhetQueryBuilder) },
            new() { Name = "parent", IsComplex = true, QueryBuilderType = typeof(OrganisasjonsenhetQueryBuilder) },
            new() { Name = "postadresse", IsComplex = true, QueryBuilderType = typeof(OrganisasjonsenhetPostadresseQueryBuilder) },
            new() { Name = "besoksadresse", IsComplex = true, QueryBuilderType = typeof(OrganisasjonsenhetBesoksAdresseQueryBuilder) },
            new() { Name = "merknad", IsComplex = true, QueryBuilderType = typeof(OrganisasjonsenhetMerknadQueryBuilder) }
        };

        protected override string TypeName => "Organisasjonsenhet";

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields => AllFieldMetadata;

        public OrganisasjonsenhetQueryBuilder WithId(string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithScalarField("id", alias, [include, skip]);

        public OrganisasjonsenhetQueryBuilder ExceptId() => ExceptField("id");

        public OrganisasjonsenhetQueryBuilder WithNavnAlleSprak(OrganisasjonsenhetnavnAlleSprakQueryBuilder organisasjonsenhetnavnAlleSprakQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithObjectField("navnAlleSprak", alias, organisasjonsenhetnavnAlleSprakQueryBuilder, [include, skip]);

        public OrganisasjonsenhetQueryBuilder ExceptNavnAlleSprak() => ExceptField("navnAlleSprak");

        public OrganisasjonsenhetQueryBuilder WithOrganisasjon(OrganisasjonQueryBuilder organisasjonQueryBuilder, QueryBuilderParameter<OrganisasjonsnavnOrderBy> orderBy = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (orderBy != null)
                args.Add(new() { ArgumentName = "orderBy", ArgumentValue = orderBy} );

            return WithObjectField("organisasjon", alias, organisasjonQueryBuilder, [include, skip], args);
        }

        public OrganisasjonsenhetQueryBuilder ExceptOrganisasjon() => ExceptField("organisasjon");

        public OrganisasjonsenhetQueryBuilder WithFakultet(FakultetQueryBuilder fakultetQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithObjectField("fakultet", alias, fakultetQueryBuilder, [include, skip]);

        public OrganisasjonsenhetQueryBuilder ExceptFakultet() => ExceptField("fakultet");

        public OrganisasjonsenhetQueryBuilder WithBibliotek(BibliotekQueryBuilder bibliotekQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithObjectField("bibliotek", alias, bibliotekQueryBuilder, [include, skip]);

        public OrganisasjonsenhetQueryBuilder ExceptBibliotek() => ExceptField("bibliotek");

        public OrganisasjonsenhetQueryBuilder WithInstituttnummer(string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithScalarField("instituttnummer", alias, [include, skip]);

        public OrganisasjonsenhetQueryBuilder ExceptInstituttnummer() => ExceptField("instituttnummer");

        public OrganisasjonsenhetQueryBuilder WithErAktiv(string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithScalarField("erAktiv", alias, [include, skip]);

        public OrganisasjonsenhetQueryBuilder ExceptErAktiv() => ExceptField("erAktiv");

        public OrganisasjonsenhetQueryBuilder WithSkalEksporteresTilLms(string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithScalarField("skalEksporteresTilLms", alias, [include, skip]);

        public OrganisasjonsenhetQueryBuilder ExceptSkalEksporteresTilLms() => ExceptField("skalEksporteresTilLms");

        public OrganisasjonsenhetQueryBuilder WithLmsRomkode(string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithScalarField("lmsRomkode", alias, [include, skip]);

        public OrganisasjonsenhetQueryBuilder ExceptLmsRomkode() => ExceptField("lmsRomkode");

        public OrganisasjonsenhetQueryBuilder WithGruppenummer(string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithScalarField("gruppenummer", alias, [include, skip]);

        public OrganisasjonsenhetQueryBuilder ExceptGruppenummer() => ExceptField("gruppenummer");

        public OrganisasjonsenhetQueryBuilder WithPersonroller(OrganisasjonsenhetPersonrollerConnectionQueryBuilder organisasjonsenhetPersonrollerConnectionQueryBuilder, QueryBuilderParameter<OrganisasjonsenhetsrollepersonrollerFilter> filter = null, QueryBuilderParameter<int?> first = null, QueryBuilderParameter<string> after = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (filter != null)
                args.Add(new() { ArgumentName = "filter", ArgumentValue = filter} );

            if (first != null)
                args.Add(new() { ArgumentName = "first", ArgumentValue = first} );

            if (after != null)
                args.Add(new() { ArgumentName = "after", ArgumentValue = after} );

            return WithObjectField("personroller", alias, organisasjonsenhetPersonrollerConnectionQueryBuilder, [include, skip], args);
        }

        public OrganisasjonsenhetQueryBuilder ExceptPersonroller() => ExceptField("personroller");

        public OrganisasjonsenhetQueryBuilder WithUtvekslingsavtaler(OrganisasjonsenhetUtvekslingsavtalerConnectionQueryBuilder organisasjonsenhetUtvekslingsavtalerConnectionQueryBuilder, QueryBuilderParameter<OrganisasjonsenhetsutvekslingsavtalerFilterInput> filter = null, QueryBuilderParameter<int?> first = null, QueryBuilderParameter<string> after = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (filter != null)
                args.Add(new() { ArgumentName = "filter", ArgumentValue = filter} );

            if (first != null)
                args.Add(new() { ArgumentName = "first", ArgumentValue = first} );

            if (after != null)
                args.Add(new() { ArgumentName = "after", ArgumentValue = after} );

            return WithObjectField("utvekslingsavtaler", alias, organisasjonsenhetUtvekslingsavtalerConnectionQueryBuilder, [include, skip], args);
        }

        public OrganisasjonsenhetQueryBuilder ExceptUtvekslingsavtaler() => ExceptField("utvekslingsavtaler");

        public OrganisasjonsenhetQueryBuilder WithInstitutt(OrganisasjonsenhetQueryBuilder organisasjonsenhetQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithObjectField("institutt", alias, organisasjonsenhetQueryBuilder, [include, skip]);

        public OrganisasjonsenhetQueryBuilder ExceptInstitutt() => ExceptField("institutt");

        public OrganisasjonsenhetQueryBuilder WithParent(OrganisasjonsenhetQueryBuilder organisasjonsenhetQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithObjectField("parent", alias, organisasjonsenhetQueryBuilder, [include, skip]);

        public OrganisasjonsenhetQueryBuilder ExceptParent() => ExceptField("parent");

        public OrganisasjonsenhetQueryBuilder WithPostadresse(OrganisasjonsenhetPostadresseQueryBuilder organisasjonsenhetPostadresseQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithObjectField("postadresse", alias, organisasjonsenhetPostadresseQueryBuilder, [include, skip]);

        public OrganisasjonsenhetQueryBuilder ExceptPostadresse() => ExceptField("postadresse");

        public OrganisasjonsenhetQueryBuilder WithBesoksadresse(OrganisasjonsenhetBesoksAdresseQueryBuilder organisasjonsenhetBesoksAdresseQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithObjectField("besoksadresse", alias, organisasjonsenhetBesoksAdresseQueryBuilder, [include, skip]);

        public OrganisasjonsenhetQueryBuilder ExceptBesoksadresse() => ExceptField("besoksadresse");

        public OrganisasjonsenhetQueryBuilder WithMerknad(OrganisasjonsenhetMerknadQueryBuilder organisasjonsenhetMerknadQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithObjectField("merknad", alias, organisasjonsenhetMerknadQueryBuilder, [include, skip]);

        public OrganisasjonsenhetQueryBuilder ExceptMerknad() => ExceptField("merknad");
    }
}
