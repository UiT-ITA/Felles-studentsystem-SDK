// <auto-generated> This file has been auto generated. </auto-generated>

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;
#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
using Newtonsoft.Json;
#endif

namespace FS.SDK.GraphQL.Model
{
    public partial class UtdanningsplanQueryBuilder : GraphQlQueryBuilder<UtdanningsplanQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
        {
            new() { Name = "id" },
            new() { Name = "studiepoeng", IsComplex = true, QueryBuilderType = typeof(StudiepoengIUtdanningsplanQueryBuilder) },
            new() { Name = "terminerIUtanningsplan", IsComplex = true, QueryBuilderType = typeof(UtdanningsplanEmneTerminQueryBuilder) },
            new() { Name = "oppbygning", IsComplex = true, QueryBuilderType = typeof(UtdanningsplanOppbygningConnectionQueryBuilder) },
            new() { Name = "emner", IsComplex = true, QueryBuilderType = typeof(UtdanningsplanEmnerConnectionQueryBuilder) },
            new() { Name = "eksternresultater", IsComplex = true, QueryBuilderType = typeof(UtdanningsplanEksternresultaterConnectionQueryBuilder) },
            new() { Name = "realkompetanser", IsComplex = true, QueryBuilderType = typeof(UtdanningsplanRealkompetanserConnectionQueryBuilder) },
            new() { Name = "utdanningsplanelementer", IsComplex = true, QueryBuilderType = typeof(UtdanningsplanUtdanningsplanelementerConnectionQueryBuilder) },
            new() { Name = "planinformasjon", IsComplex = true, QueryBuilderType = typeof(UtdanningsplanPlaninformasjonConnectionQueryBuilder) },
            new() { Name = "emnerIInnevarendeSemester", IsComplex = true, QueryBuilderType = typeof(UtdanningsplanEmnerIInnevarendeSemesterConnectionQueryBuilder) },
            new() { Name = "emnerITerminer", IsComplex = true, QueryBuilderType = typeof(UtdanningsplanEmneTerminQueryBuilder) }
        };

        protected override string TypeName => "Utdanningsplan";

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields => AllFieldMetadata;

        public UtdanningsplanQueryBuilder WithId(string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithScalarField("id", alias, [include, skip]);

        public UtdanningsplanQueryBuilder ExceptId() => ExceptField("id");

        public UtdanningsplanQueryBuilder WithStudiepoeng(StudiepoengIUtdanningsplanQueryBuilder studiepoengIUtdanningsplanQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithObjectField("studiepoeng", alias, studiepoengIUtdanningsplanQueryBuilder, [include, skip]);

        public UtdanningsplanQueryBuilder ExceptStudiepoeng() => ExceptField("studiepoeng");

        public UtdanningsplanQueryBuilder WithTerminerIUtanningsplan(UtdanningsplanEmneTerminQueryBuilder utdanningsplanEmneTerminQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithObjectField("terminerIUtanningsplan", alias, utdanningsplanEmneTerminQueryBuilder, [include, skip]);

        public UtdanningsplanQueryBuilder ExceptTerminerIUtanningsplan() => ExceptField("terminerIUtanningsplan");

        public UtdanningsplanQueryBuilder WithOppbygning(UtdanningsplanOppbygningConnectionQueryBuilder utdanningsplanOppbygningConnectionQueryBuilder, QueryBuilderParameter<int?> first = null, QueryBuilderParameter<string> after = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (first != null)
                args.Add(new() { ArgumentName = "first", ArgumentValue = first} );

            if (after != null)
                args.Add(new() { ArgumentName = "after", ArgumentValue = after} );

            return WithObjectField("oppbygning", alias, utdanningsplanOppbygningConnectionQueryBuilder, [include, skip], args);
        }

        public UtdanningsplanQueryBuilder ExceptOppbygning() => ExceptField("oppbygning");

        public UtdanningsplanQueryBuilder WithEmner(UtdanningsplanEmnerConnectionQueryBuilder utdanningsplanEmnerConnectionQueryBuilder, QueryBuilderParameter<EmneIUtdanningsplanFilterInput> filter = null, QueryBuilderParameter<int?> first = null, QueryBuilderParameter<string> after = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (filter != null)
                args.Add(new() { ArgumentName = "filter", ArgumentValue = filter} );

            if (first != null)
                args.Add(new() { ArgumentName = "first", ArgumentValue = first} );

            if (after != null)
                args.Add(new() { ArgumentName = "after", ArgumentValue = after} );

            return WithObjectField("emner", alias, utdanningsplanEmnerConnectionQueryBuilder, [include, skip], args);
        }

        public UtdanningsplanQueryBuilder ExceptEmner() => ExceptField("emner");

        public UtdanningsplanQueryBuilder WithEksternresultater(UtdanningsplanEksternresultaterConnectionQueryBuilder utdanningsplanEksternresultaterConnectionQueryBuilder, QueryBuilderParameter<int?> first = null, QueryBuilderParameter<string> after = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (first != null)
                args.Add(new() { ArgumentName = "first", ArgumentValue = first} );

            if (after != null)
                args.Add(new() { ArgumentName = "after", ArgumentValue = after} );

            return WithObjectField("eksternresultater", alias, utdanningsplanEksternresultaterConnectionQueryBuilder, [include, skip], args);
        }

        public UtdanningsplanQueryBuilder ExceptEksternresultater() => ExceptField("eksternresultater");

        public UtdanningsplanQueryBuilder WithRealkompetanser(UtdanningsplanRealkompetanserConnectionQueryBuilder utdanningsplanRealkompetanserConnectionQueryBuilder, QueryBuilderParameter<int?> first = null, QueryBuilderParameter<string> after = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (first != null)
                args.Add(new() { ArgumentName = "first", ArgumentValue = first} );

            if (after != null)
                args.Add(new() { ArgumentName = "after", ArgumentValue = after} );

            return WithObjectField("realkompetanser", alias, utdanningsplanRealkompetanserConnectionQueryBuilder, [include, skip], args);
        }

        public UtdanningsplanQueryBuilder ExceptRealkompetanser() => ExceptField("realkompetanser");

        public UtdanningsplanQueryBuilder WithUtdanningsplanelementer(UtdanningsplanUtdanningsplanelementerConnectionQueryBuilder utdanningsplanUtdanningsplanelementerConnectionQueryBuilder, QueryBuilderParameter<int?> first = null, QueryBuilderParameter<string> after = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (first != null)
                args.Add(new() { ArgumentName = "first", ArgumentValue = first} );

            if (after != null)
                args.Add(new() { ArgumentName = "after", ArgumentValue = after} );

            return WithObjectField("utdanningsplanelementer", alias, utdanningsplanUtdanningsplanelementerConnectionQueryBuilder, [include, skip], args);
        }

        public UtdanningsplanQueryBuilder ExceptUtdanningsplanelementer() => ExceptField("utdanningsplanelementer");

        public UtdanningsplanQueryBuilder WithPlaninformasjon(UtdanningsplanPlaninformasjonConnectionQueryBuilder utdanningsplanPlaninformasjonConnectionQueryBuilder, QueryBuilderParameter<int?> first = null, QueryBuilderParameter<string> after = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (first != null)
                args.Add(new() { ArgumentName = "first", ArgumentValue = first} );

            if (after != null)
                args.Add(new() { ArgumentName = "after", ArgumentValue = after} );

            return WithObjectField("planinformasjon", alias, utdanningsplanPlaninformasjonConnectionQueryBuilder, [include, skip], args);
        }

        public UtdanningsplanQueryBuilder ExceptPlaninformasjon() => ExceptField("planinformasjon");

        public UtdanningsplanQueryBuilder WithEmnerIInnevarendeSemester(UtdanningsplanEmnerIInnevarendeSemesterConnectionQueryBuilder utdanningsplanEmnerIInnevarendeSemesterConnectionQueryBuilder, QueryBuilderParameter<int?> first = null, QueryBuilderParameter<string> after = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (first != null)
                args.Add(new() { ArgumentName = "first", ArgumentValue = first} );

            if (after != null)
                args.Add(new() { ArgumentName = "after", ArgumentValue = after} );

            return WithObjectField("emnerIInnevarendeSemester", alias, utdanningsplanEmnerIInnevarendeSemesterConnectionQueryBuilder, [include, skip], args);
        }

        public UtdanningsplanQueryBuilder ExceptEmnerIInnevarendeSemester() => ExceptField("emnerIInnevarendeSemester");

        public UtdanningsplanQueryBuilder WithEmnerITerminer(UtdanningsplanEmneTerminQueryBuilder utdanningsplanEmneTerminQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithObjectField("emnerITerminer", alias, utdanningsplanEmneTerminQueryBuilder, [include, skip]);

        public UtdanningsplanQueryBuilder ExceptEmnerITerminer() => ExceptField("emnerITerminer");
    }
}
