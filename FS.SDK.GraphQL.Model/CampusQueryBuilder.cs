// <auto-generated> This file has been auto generated. </auto-generated>

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;
#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
using Newtonsoft.Json;
#endif

namespace FS.SDK.GraphQL.Model
{
    public partial class CampusQueryBuilder : GraphQlQueryBuilder<CampusQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
        {
            new() { Name = "id" },
            new() { Name = "kode" },
            new() { Name = "navnAlleSprak", IsComplex = true, QueryBuilderType = typeof(CampusnavnAlleSprakQueryBuilder) },
            new() { Name = "organisasjonsnummer" },
            new() { Name = "programStudieretter", IsComplex = true, QueryBuilderType = typeof(CampusProgramStudieretterConnectionQueryBuilder) },
            new() { Name = "bygninger", IsComplex = true, QueryBuilderType = typeof(CampusBygningerConnectionQueryBuilder) },
            new() { Name = "fagpersoner", IsComplex = true, QueryBuilderType = typeof(CampusFagpersonerConnectionQueryBuilder) }
        };

        protected override string TypeName => "Campus";

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields => AllFieldMetadata;

        public CampusQueryBuilder WithId(string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithScalarField("id", alias, [include, skip]);

        public CampusQueryBuilder ExceptId() => ExceptField("id");

        public CampusQueryBuilder WithKode(string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithScalarField("kode", alias, [include, skip]);

        public CampusQueryBuilder ExceptKode() => ExceptField("kode");

        public CampusQueryBuilder WithNavnAlleSprak(CampusnavnAlleSprakQueryBuilder campusnavnAlleSprakQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithObjectField("navnAlleSprak", alias, campusnavnAlleSprakQueryBuilder, [include, skip]);

        public CampusQueryBuilder ExceptNavnAlleSprak() => ExceptField("navnAlleSprak");

        public CampusQueryBuilder WithOrganisasjonsnummer(string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithScalarField("organisasjonsnummer", alias, [include, skip]);

        public CampusQueryBuilder ExceptOrganisasjonsnummer() => ExceptField("organisasjonsnummer");

        public CampusQueryBuilder WithProgramStudieretter(CampusProgramStudieretterConnectionQueryBuilder campusProgramStudieretterConnectionQueryBuilder, QueryBuilderParameter<CampusProgramStudieretterFilterInput> filter = null, QueryBuilderParameter<CampusProgramStudieretterOrderByInput> orderBy = null, QueryBuilderParameter<int?> first = null, QueryBuilderParameter<string> after = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (filter != null)
                args.Add(new() { ArgumentName = "filter", ArgumentValue = filter} );

            if (orderBy != null)
                args.Add(new() { ArgumentName = "orderBy", ArgumentValue = orderBy} );

            if (first != null)
                args.Add(new() { ArgumentName = "first", ArgumentValue = first} );

            if (after != null)
                args.Add(new() { ArgumentName = "after", ArgumentValue = after} );

            return WithObjectField("programStudieretter", alias, campusProgramStudieretterConnectionQueryBuilder, [include, skip], args);
        }

        public CampusQueryBuilder ExceptProgramStudieretter() => ExceptField("programStudieretter");

        public CampusQueryBuilder WithBygninger(CampusBygningerConnectionQueryBuilder campusBygningerConnectionQueryBuilder, QueryBuilderParameter<int?> first = null, QueryBuilderParameter<string> after = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (first != null)
                args.Add(new() { ArgumentName = "first", ArgumentValue = first} );

            if (after != null)
                args.Add(new() { ArgumentName = "after", ArgumentValue = after} );

            return WithObjectField("bygninger", alias, campusBygningerConnectionQueryBuilder, [include, skip], args);
        }

        public CampusQueryBuilder ExceptBygninger() => ExceptField("bygninger");

        public CampusQueryBuilder WithFagpersoner(CampusFagpersonerConnectionQueryBuilder campusFagpersonerConnectionQueryBuilder, QueryBuilderParameter<int?> first = null, QueryBuilderParameter<string> after = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (first != null)
                args.Add(new() { ArgumentName = "first", ArgumentValue = first} );

            if (after != null)
                args.Add(new() { ArgumentName = "after", ArgumentValue = after} );

            return WithObjectField("fagpersoner", alias, campusFagpersonerConnectionQueryBuilder, [include, skip], args);
        }

        public CampusQueryBuilder ExceptFagpersoner() => ExceptField("fagpersoner");
    }
}
