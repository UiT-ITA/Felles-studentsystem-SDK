// <auto-generated> This file has been auto generated. </auto-generated>

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;
#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
using Newtonsoft.Json;
#endif

namespace FS.SDK.GraphQL.Model
{
    public partial class FsSoknadQueryBuilder : GraphQlQueryBuilder<FsSoknadQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
        {
            new() { Name = "id" },
            new() { Name = "opptak", IsComplex = true, QueryBuilderType = typeof(FsOpptakQueryBuilder) },
            new() { Name = "sokernummer" },
            new() { Name = "soknadsAlternativer", IsComplex = true, QueryBuilderType = typeof(FsSoknadSoknadsAlternativerConnectionQueryBuilder) },
            new() { Name = "dokumenter", IsComplex = true, QueryBuilderType = typeof(FsSoknadDokumenterConnectionQueryBuilder) },
            new() { Name = "behandlendeLarested", IsComplex = true, QueryBuilderType = typeof(OrganisasjonQueryBuilder) }
        };

        protected override string TypeName => "FsSoknad";

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields => AllFieldMetadata;

        public FsSoknadQueryBuilder WithId(string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithScalarField("id", alias, [include, skip]);

        public FsSoknadQueryBuilder ExceptId() => ExceptField("id");

        public FsSoknadQueryBuilder WithOpptak(FsOpptakQueryBuilder fsOpptakQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithObjectField("opptak", alias, fsOpptakQueryBuilder, [include, skip]);

        public FsSoknadQueryBuilder ExceptOpptak() => ExceptField("opptak");

        public FsSoknadQueryBuilder WithSokernummer(string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithScalarField("sokernummer", alias, [include, skip]);

        public FsSoknadQueryBuilder ExceptSokernummer() => ExceptField("sokernummer");

        public FsSoknadQueryBuilder WithSoknadsAlternativer(FsSoknadSoknadsAlternativerConnectionQueryBuilder fsSoknadSoknadsAlternativerConnectionQueryBuilder, QueryBuilderParameter<int?> first = null, QueryBuilderParameter<string> after = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (first != null)
                args.Add(new() { ArgumentName = "first", ArgumentValue = first} );

            if (after != null)
                args.Add(new() { ArgumentName = "after", ArgumentValue = after} );

            return WithObjectField("soknadsAlternativer", alias, fsSoknadSoknadsAlternativerConnectionQueryBuilder, [include, skip], args);
        }

        public FsSoknadQueryBuilder ExceptSoknadsAlternativer() => ExceptField("soknadsAlternativer");

        public FsSoknadQueryBuilder WithDokumenter(FsSoknadDokumenterConnectionQueryBuilder fsSoknadDokumenterConnectionQueryBuilder, QueryBuilderParameter<int?> first = null, QueryBuilderParameter<string> after = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (first != null)
                args.Add(new() { ArgumentName = "first", ArgumentValue = first} );

            if (after != null)
                args.Add(new() { ArgumentName = "after", ArgumentValue = after} );

            return WithObjectField("dokumenter", alias, fsSoknadDokumenterConnectionQueryBuilder, [include, skip], args);
        }

        public FsSoknadQueryBuilder ExceptDokumenter() => ExceptField("dokumenter");

        public FsSoknadQueryBuilder WithBehandlendeLarested(OrganisasjonQueryBuilder organisasjonQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithObjectField("behandlendeLarested", alias, organisasjonQueryBuilder, [include, skip]);

        public FsSoknadQueryBuilder ExceptBehandlendeLarested() => ExceptField("behandlendeLarested");
    }
}
